
LED_PWM_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f28  08006f28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08006fa0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08006fa0  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014111  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002539  00000000  00000000  000341b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  000366f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029213  00000000  00000000  00038ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd66  00000000  00000000  00061dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001063de  00000000  00000000  0006fb21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175eff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000542c  00000000  00000000  00175f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e84 	.word	0x08006e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006e84 	.word	0x08006e84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	if (user_button.flag_maybe_pressed == OFF) {
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x30>)
 800058c:	789b      	ldrb	r3, [r3, #2]
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <HAL_GPIO_EXTI_Callback+0x22>
		user_button.flag_maybe_pressed = ON;
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x30>)
 800059a:	7893      	ldrb	r3, [r2, #2]
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	7093      	strb	r3, [r2, #2]
	}
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	adc.value = HAL_ADC_GetValue(&hadc3);
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80005be:	f001 fae9 	bl	8001b94 <HAL_ADC_GetValue>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
	fsm.new_event = ON;
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005ca:	7893      	ldrb	r3, [r2, #2]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	7093      	strb	r3, [r2, #2]
	fsm.event = EVT_ADC_RECEIVED;
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005d4:	2206      	movs	r2, #6
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	200000b8 	.word	0x200000b8

080005ec <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a56      	ldr	r2, [pc, #344]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	f040 80a5 	bne.w	800074a <HAL_TIM_PeriodElapsedCallback+0x15e>
		/* after EXTI interrupt is triggered */
		if ( user_button.flag_maybe_pressed == ON ) {
 8000600:	4b55      	ldr	r3, [pc, #340]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <HAL_TIM_PeriodElapsedCallback+0x2e>
			user_button.debounc_count++;
 800060e:	4b52      	ldr	r3, [pc, #328]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b50      	ldr	r3, [pc, #320]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000618:	801a      	strh	r2, [r3, #0]
		}
		/* 10mSec elapsed */
		if ( user_button.debounc_count >= 10 ) {
 800061a:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	2b09      	cmp	r3, #9
 8000620:	d914      	bls.n	800064c <HAL_TIM_PeriodElapsedCallback+0x60>

			/* button still pressed */
			if ( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ) {
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	484d      	ldr	r0, [pc, #308]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000628:	f002 fbda 	bl	8002de0 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d10c      	bne.n	800064c <HAL_TIM_PeriodElapsedCallback+0x60>
				user_button.flag_maybe_pressed = OFF;
 8000632:	4a49      	ldr	r2, [pc, #292]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000634:	7893      	ldrb	r3, [r2, #2]
 8000636:	f36f 0341 	bfc	r3, #1, #1
 800063a:	7093      	strb	r3, [r2, #2]
				user_button.flag_pressed = ON;
 800063c:	4a46      	ldr	r2, [pc, #280]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800063e:	7893      	ldrb	r3, [r2, #2]
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	7093      	strb	r3, [r2, #2]
				user_button.debounc_count = 0;
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
			}

		}
		/* Debouncing ignored */
		if ( user_button.flag_pressed == ON ) {
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d051      	beq.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
			user_button.flag_pressed =  OFF;
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800065c:	7893      	ldrb	r3, [r2, #2]
 800065e:	f36f 0300 	bfc	r3, #0, #1
 8000662:	7093      	strb	r3, [r2, #2]
			user_led.status ^= ON; /* Start heartbeat */
 8000664:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000666:	789b      	ldrb	r3, [r3, #2]
 8000668:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	4a3a      	ldr	r2, [pc, #232]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000676:	7893      	ldrb	r3, [r2, #2]
 8000678:	f361 0300 	bfi	r3, r1, #0, #1
 800067c:	7093      	strb	r3, [r2, #2]

			if ( fsm.state == STATE_0 ) {
 800067e:	4b39      	ldr	r3, [pc, #228]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d108      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0xac>
				fsm.new_event = ON;
 8000686:	4a37      	ldr	r2, [pc, #220]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000688:	7893      	ldrb	r3, [r2, #2]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	7093      	strb	r3, [r2, #2]
				fsm.event = EVT_30;
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000692:	2202      	movs	r2, #2
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e032      	b.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
			}
			else if ( fsm.state == STATE_30 ) {
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800069a:	785b      	ldrb	r3, [r3, #1]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d108      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0xc6>
				fsm.new_event = ON;
 80006a0:	4a30      	ldr	r2, [pc, #192]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006a2:	7893      	ldrb	r3, [r2, #2]
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	7093      	strb	r3, [r2, #2]
				fsm.event = EVT_70;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e025      	b.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
			}
			else if ( fsm.state == STATE_70 ) {
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d108      	bne.n	80006cc <HAL_TIM_PeriodElapsedCallback+0xe0>
				fsm.new_event = ON;
 80006ba:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006bc:	7893      	ldrb	r3, [r2, #2]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	7093      	strb	r3, [r2, #2]
				fsm.event = EVT_100;
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e018      	b.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
			}
			else if ( fsm.state == STATE_100 ) {
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006ce:	785b      	ldrb	r3, [r3, #1]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d108      	bne.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xfa>
				fsm.new_event = ON;
 80006d4:	4a23      	ldr	r2, [pc, #140]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006d6:	7893      	ldrb	r3, [r2, #2]
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	7093      	strb	r3, [r2, #2]
				fsm.event = EVT_ADC;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006e0:	2205      	movs	r2, #5
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e00b      	b.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
			}
			else if ( fsm.state == STATE_ADC ) {
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d107      	bne.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x112>
				fsm.new_event = ON;
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006f0:	7893      	ldrb	r3, [r2, #2]
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	7093      	strb	r3, [r2, #2]
				fsm.event = EVT_0;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			}
		}

		if (user_led.status == ON) {
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d007      	beq.n	800071c <HAL_TIM_PeriodElapsedCallback+0x130>
			user_led.counter++;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	3301      	adds	r3, #1
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000718:	801a      	strh	r2, [r3, #0]
 800071a:	e008      	b.n	800072e <HAL_TIM_PeriodElapsedCallback+0x142>
		} else {
			user_led.counter = 0;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800071e:	2200      	movs	r2, #0
 8000720:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
 8000722:	2200      	movs	r2, #0
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f002 fb71 	bl	8002e10 <HAL_GPIO_WritePin>
		}

		if ( user_led.counter >= 1000 ) {
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000738:	d307      	bcc.n	800074a <HAL_TIM_PeriodElapsedCallback+0x15e>
			user_led.counter = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
			user_led.start_blink = ON;
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000742:	7893      	ldrb	r3, [r2, #2]
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	7093      	strb	r3, [r2, #2]
		}

	}
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40000800 	.word	0x40000800
 8000758:	2000008c 	.word	0x2000008c
 800075c:	48000800 	.word	0x48000800
 8000760:	200000a8 	.word	0x200000a8
 8000764:	200000b8 	.word	0x200000b8

08000768 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800076c:	f000 fd31 	bl	80011d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000770:	f000 f850 	bl	8000814 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000774:	f000 fa04 	bl	8000b80 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000778:	f000 f92a 	bl	80009d0 <MX_TIM2_Init>
	MX_TIM4_Init();
 800077c:	f000 f982 	bl	8000a84 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8000780:	f000 f9ce 	bl	8000b20 <MX_USART2_UART_Init>
	MX_ADC3_Init();
 8000784:	f000 f8be 	bl	8000904 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	uart2.tx_buff[BUFF_SIZE - 1] = '\0';
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <main+0x88>)
 800078a:	2200      	movs	r2, #0
 800078c:	74da      	strb	r2, [r3, #19]

	HAL_TIM_Base_Start_IT(&htim4);
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <main+0x8c>)
 8000790:	f003 feb2 	bl	80044f8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000794:	2100      	movs	r1, #0
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <main+0x90>)
 8000798:	f003 ff04 	bl	80045a4 <HAL_TIM_PWM_Start_IT>

	fsm_init(&fsm);
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <main+0x94>)
 800079e:	f000 fa47 	bl	8000c30 <fsm_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		fsm_run(&fsm);
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <main+0x94>)
 80007a4:	f000 fa60 	bl	8000c68 <fsm_run>
		if ( user_led.start_blink == ON ) {
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <main+0x98>)
 80007aa:	789b      	ldrb	r3, [r3, #2]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f5      	beq.n	80007a2 <main+0x3a>
			user_led.start_blink = OFF;
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <main+0x98>)
 80007b8:	7893      	ldrb	r3, [r2, #2]
 80007ba:	f36f 0382 	bfc	r3, #2, #1
 80007be:	7093      	strb	r3, [r2, #2]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f002 fb3b 	bl	8002e40 <HAL_GPIO_TogglePin>
			sprintf((char *)(uart2.tx_buff), "%d\r\n",(int)(adc.value));
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <main+0x9c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	490d      	ldr	r1, [pc, #52]	; (8000808 <main+0xa0>)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <main+0xa4>)
 80007d4:	f005 ff50 	bl	8006678 <siprintf>
			HAL_UART_Transmit_IT(&huart2, uart2.tx_buff, (uint16_t)strlen((const char *)uart2.tx_buff));
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <main+0xa4>)
 80007da:	f7ff fcf9 	bl	80001d0 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4909      	ldr	r1, [pc, #36]	; (800080c <main+0xa4>)
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <main+0xa8>)
 80007e8:	f004 ffb8 	bl	800575c <HAL_UART_Transmit_IT>
		fsm_run(&fsm);
 80007ec:	e7d9      	b.n	80007a2 <main+0x3a>
 80007ee:	bf00      	nop
 80007f0:	20000090 	.word	0x20000090
 80007f4:	200000bc 	.word	0x200000bc
 80007f8:	20000160 	.word	0x20000160
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	200000a8 	.word	0x200000a8
 8000804:	200000a4 	.word	0x200000a4
 8000808:	08006e9c 	.word	0x08006e9c
 800080c:	2000009a 	.word	0x2000009a
 8000810:	200001a0 	.word	0x200001a0

08000814 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0b8      	sub	sp, #224	; 0xe0
 8000818:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081e:	2244      	movs	r2, #68	; 0x44
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 ff20 	bl	8006668 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2288      	movs	r2, #136	; 0x88
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 ff12 	bl	8006668 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000844:	2310      	movs	r3, #16
 8000846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb80 	bl	8002f6c <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000872:	f000 fa89 	bl	8000d88 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f002 ff4c 	bl	8003738 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x96>
	{
		Error_Handler();
 80008a6:	f000 fa6f 	bl	8000d88 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80008aa:	f244 0302 	movw	r3, #16386	; 0x4002
 80008ae:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b8:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ba:	2301      	movs	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008c2:	2308      	movs	r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008c6:	2307      	movs	r3, #7
 80008c8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008d6:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 f930 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xd6>
	{
		Error_Handler();
 80008e6:	f000 fa4f 	bl	8000d88 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ee:	f002 fae7 	bl	8002ec0 <HAL_PWREx_ControlVoltageScaling>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xe8>
	{
		Error_Handler();
 80008f8:	f000 fa46 	bl	8000d88 <Error_Handler>
	}
}
 80008fc:	bf00      	nop
 80008fe:	37e0      	adds	r7, #224	; 0xe0
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800091c:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <MX_ADC3_Init+0xc4>)
 800091e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800093a:	2204      	movs	r2, #4
 800093c:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800094c:	2201      	movs	r2, #1
 800094e:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.NbrOfDiscConversion = 1;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800095a:	2201      	movs	r2, #1
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ADC3_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000980:	4810      	ldr	r0, [pc, #64]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000982:	f000 fe81 	bl	8001688 <HAL_ADC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x8c>
	{
		Error_Handler();
 800098c:	f000 f9fc 	bl	8000d88 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_ADC3_Init+0xc8>)
 8000992:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000994:	2306      	movs	r3, #6
 8000996:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800099c:	237f      	movs	r3, #127	; 0x7f
 800099e:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a0:	2304      	movs	r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_ADC3_Init+0xc0>)
 80009ae:	f001 fb2d 	bl	800200c <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC3_Init+0xb8>
	{
		Error_Handler();
 80009b8:	f000 f9e6 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000fc 	.word	0x200000fc
 80009c8:	50040200 	.word	0x50040200
 80009cc:	04300002 	.word	0x04300002

080009d0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_TIM2_Init+0xb0>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 159;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_TIM2_Init+0xb0>)
 80009fe:	229f      	movs	r2, #159	; 0x9f
 8000a00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a0a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a1c:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a1e:	f003 fd95 	bl	800454c <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000a28:	f000 f9ae 	bl	8000d88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a3c:	f004 fd9a 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000a46:	f000 f99f 	bl	8000d88 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 99;
 8000a4e:	2363      	movs	r3, #99	; 0x63
 8000a50:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a62:	f003 ff5d 	bl	8004920 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8000a6c:	f000 f98c 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM2_Init+0xb0>)
 8000a72:	f000 fa47 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000160 	.word	0x20000160

08000a84 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_TIM4_Init+0x98>)
 8000aa6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aae:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 16;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000aca:	f003 fce9 	bl	80044a0 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8000ad4:	f000 f958 	bl	8000d88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000ae6:	f004 f833 	bl	8004b50 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8000af0:	f000 f94a 	bl	8000d88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM4_Init+0x94>)
 8000b02:	f004 fd37 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8000b0c:	f000 f93c 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000bc 	.word	0x200000bc
 8000b1c:	40000800 	.word	0x40000800

08000b20 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART2_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART2_UART_Init+0x58>)
 8000b64:	f004 fdac 	bl	80056c0 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000b6e:	f000 f90b 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200001a0 	.word	0x200001a0
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_GPIO_Init+0xa4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f002 f91f 	bl	8002e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_GPIO_Init+0xa8>)
 8000bda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000be8:	f001 ff52 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f001 ff43 	bl	8002a90 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f001 fec7 	bl	80029a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f001 fee0 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000
 8000c28:	10210000 	.word	0x10210000
 8000c2c:	48000800 	.word	0x48000800

08000c30 <fsm_init>:

/* USER CODE BEGIN 4 */
void fsm_init (fsm_t *fsm) {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	fsm->state = STATE_0;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	705a      	strb	r2, [r3, #1]
	fsm->event = EVT_NO_EVT;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	fsm->new_event = OFF;
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	7893      	ldrb	r3, [r2, #2]
 8000c48:	f36f 0300 	bfc	r3, #0, #1
 8000c4c:	7093      	strb	r3, [r2, #2]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <fsm_init+0x34>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000160 	.word	0x20000160

08000c68 <fsm_run>:

void fsm_run (fsm_t *fsm) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if ( fsm->new_event == ON ) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d078      	beq.n	8000d70 <fsm_run+0x108>
		fsm->new_event = OFF;
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	7893      	ldrb	r3, [r2, #2]
 8000c82:	f36f 0300 	bfc	r3, #0, #1
 8000c86:	7093      	strb	r3, [r2, #2]

		switch (fsm->state) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d86f      	bhi.n	8000d70 <fsm_run+0x108>
 8000c90:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <fsm_run+0x30>)
 8000c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c96:	bf00      	nop
 8000c98:	08000cad 	.word	0x08000cad
 8000c9c:	08000cc7 	.word	0x08000cc7
 8000ca0:	08000ce1 	.word	0x08000ce1
 8000ca4:	08000cfb 	.word	0x08000cfb
 8000ca8:	08000d11 	.word	0x08000d11

		case STATE_0:

			if ( fsm->event == EVT_30 ) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d154      	bne.n	8000d5e <fsm_run+0xf6>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <fsm_run+0x110>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_30;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000cc4:	e04b      	b.n	8000d5e <fsm_run+0xf6>

		case STATE_30:

			if ( fsm->event == EVT_70 ) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d149      	bne.n	8000d62 <fsm_run+0xfa>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1399);
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <fsm_run+0x110>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f240 5277 	movw	r2, #1399	; 0x577
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_70;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000cde:	e040      	b.n	8000d62 <fsm_run+0xfa>

		case STATE_70:

			if ( fsm->event == EVT_100 ) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d13e      	bne.n	8000d66 <fsm_run+0xfe>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1999);
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <fsm_run+0x110>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_100;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000cf8:	e035      	b.n	8000d66 <fsm_run+0xfe>

		case STATE_100:

			if ( fsm->event == EVT_ADC ) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d133      	bne.n	8000d6a <fsm_run+0x102>
				HAL_ADC_Start_IT(&hadc3);
 8000d02:	481e      	ldr	r0, [pc, #120]	; (8000d7c <fsm_run+0x114>)
 8000d04:	f000 fe14 	bl	8001930 <HAL_ADC_Start_IT>
				fsm->state = STATE_ADC;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000d0e:	e02c      	b.n	8000d6a <fsm_run+0x102>

		case STATE_ADC:

			if ( fsm->event == EVT_0 ) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d107      	bne.n	8000d28 <fsm_run+0xc0>

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <fsm_run+0x110>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	705a      	strb	r2, [r3, #1]
				HAL_ADC_Start_IT(&hadc3);
				fsm->state = STATE_ADC;

			}

			break;
 8000d26:	e022      	b.n	8000d6e <fsm_run+0x106>
			else if ( fsm->event == EVT_ADC_RECEIVED ) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d11e      	bne.n	8000d6e <fsm_run+0x106>
				volatile uint32_t pwm_value = (adc.value*1999)/(4050);
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <fsm_run+0x118>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <fsm_run+0x11c>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0a9b      	lsrs	r3, r3, #10
 8000d46:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <fsm_run+0x110>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_ADC_Start_IT(&hadc3);
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <fsm_run+0x114>)
 8000d52:	f000 fded 	bl	8001930 <HAL_ADC_Start_IT>
				fsm->state = STATE_ADC;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	705a      	strb	r2, [r3, #1]
			break;
 8000d5c:	e007      	b.n	8000d6e <fsm_run+0x106>
			break;
 8000d5e:	bf00      	nop
 8000d60:	e006      	b.n	8000d70 <fsm_run+0x108>
			break;
 8000d62:	bf00      	nop
 8000d64:	e004      	b.n	8000d70 <fsm_run+0x108>
			break;
 8000d66:	bf00      	nop
 8000d68:	e002      	b.n	8000d70 <fsm_run+0x108>
			break;
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <fsm_run+0x108>
			break;
 8000d6e:	bf00      	nop

		}

	}
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000160 	.word	0x20000160
 8000d7c:	200000fc 	.word	0x200000fc
 8000d80:	200000a4 	.word	0x200000a4
 8000d84:	81742e05 	.word	0x81742e05

08000d88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	; 0x60
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_ADC_MspInit+0x88>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e36:	230b      	movs	r3, #11
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_ADC_MspInit+0x8c>)
 8000e46:	f001 fe23 	bl	8002a90 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	202f      	movs	r0, #47	; 0x2f
 8000e50:	f001 fda7 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000e54:	202f      	movs	r0, #47	; 0x2f
 8000e56:	f001 fdc0 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	50040200 	.word	0x50040200
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800

08000e70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d113      	bne.n	8000eaa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f001 fd7f 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f001 fd98 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d113      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201e      	movs	r0, #30
 8000ee8:	f001 fd5b 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eec:	201e      	movs	r0, #30
 8000eee:	f001 fd74 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40000800 	.word	0x40000800
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f24:	d11c      	bne.n	8000f60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_TIM_MspPostInit+0x64>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_TIM_MspPostInit+0x64>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_MspPostInit+0x64>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f001 fd98 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_UART_MspInit+0x90>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 fd58 	bl	8002a90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2026      	movs	r0, #38	; 0x26
 8000fe6:	f001 fcdc 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fea:	2026      	movs	r0, #38	; 0x26
 8000fec:	f001 fcf5 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40021000 	.word	0x40021000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f910 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM2_IRQHandler+0x10>)
 8001062:	f003 fb3d 	bl	80046e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000160 	.word	0x20000160

08001070 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM4_IRQHandler+0x10>)
 8001076:	f003 fb33 	bl	80046e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000bc 	.word	0x200000bc

08001084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USART2_IRQHandler+0x10>)
 800108a:	f004 fbc3 	bl	8005814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001a0 	.word	0x200001a0

08001098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800109c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010a0:	f001 fee8 	bl	8002e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ADC3_IRQHandler+0x10>)
 80010ae:	f000 fd7f 	bl	8001bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000fc 	.word	0x200000fc

080010bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x50>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x16>
		heap_end = &end;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <_sbrk+0x50>)
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <_sbrk+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <_sbrk+0x50>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <_sbrk+0x50>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	466a      	mov	r2, sp
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d907      	bls.n	80010f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010e6:	f005 fa95 	bl	8006614 <__errno>
 80010ea:	4602      	mov	r2, r0
 80010ec:	230c      	movs	r3, #12
 80010ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f4:	e006      	b.n	8001104 <_sbrk+0x48>
	}

	heap_end += incr;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <_sbrk+0x50>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a03      	ldr	r2, [pc, #12]	; (800110c <_sbrk+0x50>)
 8001100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000ac 	.word	0x200000ac
 8001110:	20000228 	.word	0x20000228

08001114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <SystemInit+0x64>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <SystemInit+0x64>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <SystemInit+0x68>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <SystemInit+0x68>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <SystemInit+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <SystemInit+0x68>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <SystemInit+0x68>)
 8001140:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001144:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001148:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SystemInit+0x68>)
 800114c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001150:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <SystemInit+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <SystemInit+0x68>)
 8001158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <SystemInit+0x68>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SystemInit+0x64>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116a:	609a      	str	r2, [r3, #8]
#endif
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	40021000 	.word	0x40021000

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001184:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001186:	e003      	b.n	8001190 <LoopCopyDataInit>

08001188 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800118a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800118c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800118e:	3104      	adds	r1, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001194:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001196:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001198:	d3f6      	bcc.n	8001188 <CopyDataInit>
	ldr	r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800119c:	e002      	b.n	80011a4 <LoopFillZerobss>

0800119e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800119e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a0:	f842 3b04 	str.w	r3, [r2], #4

080011a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <LoopForever+0x16>)
	cmp	r2, r3
 80011a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a8:	d3f9      	bcc.n	800119e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011aa:	f7ff ffb3 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f005 fa37 	bl	8006620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff fad9 	bl	8000768 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011bc:	08006f30 	.word	0x08006f30
	ldr	r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011c4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80011c8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80011cc:	20000228 	.word	0x20000228

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f001 fbd5 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f80e 	bl	8001204 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e001      	b.n	80011f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f4:	f7ff fdd0 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_InitTick+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d022      	beq.n	800125e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_InitTick+0x6c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_InitTick+0x68>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001224:	fbb1 f3f3 	udiv	r3, r1, r3
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fbe2 	bl	80029f6 <HAL_SYSTICK_Config>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10f      	bne.n	8001258 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d809      	bhi.n	8001252 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123e:	2200      	movs	r2, #0
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001246:	f001 fbac 	bl	80029a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_InitTick+0x70>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e007      	b.n	8001262 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e004      	b.n	8001262 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x1c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x20>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x1c>)
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000220 	.word	0x20000220
 8001298:	20000008 	.word	0x20000008

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000220 	.word	0x20000220

080012b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800131c:	b490      	push	{r4, r7}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3360      	adds	r3, #96	; 0x60
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <LL_ADC_SetOffset+0x40>)
 800133c:	4013      	ands	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	4313      	orrs	r3, r2
 800134a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800134e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bc90      	pop	{r4, r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	03fff000 	.word	0x03fff000

08001360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001360:	b490      	push	{r4, r7}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3360      	adds	r3, #96	; 0x60
 800136e:	461a      	mov	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bc90      	pop	{r4, r7}
 8001386:	4770      	bx	lr

08001388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001388:	b490      	push	{r4, r7}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3360      	adds	r3, #96	; 0x60
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013de:	b490      	push	{r4, r7}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	4413      	add	r3, r2
 80013fc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80013fe:	6822      	ldr	r2, [r4, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	211f      	movs	r1, #31
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0e9b      	lsrs	r3, r3, #26
 8001414:	f003 011f 	and.w	r1, r3, #31
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bc90      	pop	{r4, r7}
 800142e:	4770      	bx	lr

08001430 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001456:	b490      	push	{r4, r7}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3314      	adds	r3, #20
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0e5b      	lsrs	r3, r3, #25
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	0d1b      	lsrs	r3, r3, #20
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	2107      	movs	r1, #7
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	0d1b      	lsrs	r3, r3, #20
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc90      	pop	{r4, r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0318 	and.w	r3, r3, #24
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80014cc:	40d9      	lsrs	r1, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	400b      	ands	r3, r1
 80014d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d6:	431a      	orrs	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	0007ffff 	.word	0x0007ffff

080014f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 031f 	and.w	r3, r3, #31
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001538:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6093      	str	r3, [r2, #8]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800155c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001560:	d101      	bne.n	8001566 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015b0:	d101      	bne.n	80015b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <LL_ADC_IsEnabled+0x18>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <LL_ADC_IsEnabled+0x1a>
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001622:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001626:	f043 0204 	orr.w	r2, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b04      	cmp	r3, #4
 800164c:	d101      	bne.n	8001652 <LL_ADC_REG_IsConversionOngoing+0x18>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b08      	cmp	r3, #8
 8001672:	d101      	bne.n	8001678 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e134      	b.n	800190c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fb95 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff3f 	bl	800154c <LL_ADC_IsDeepPowerDownEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff25 	bl	8001528 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff5a 	bl	800159c <LL_ADC_IsInternalRegulatorEnabled>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d113      	bne.n	8001716 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff3e 	bl	8001574 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016f8:	4b86      	ldr	r3, [pc, #536]	; (8001914 <HAL_ADC_Init+0x28c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	4a86      	ldr	r2, [pc, #536]	; (8001918 <HAL_ADC_Init+0x290>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001708:	e002      	b.n	8001710 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3b01      	subs	r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f9      	bne.n	800170a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff3e 	bl	800159c <LL_ADC_IsInternalRegulatorEnabled>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10d      	bne.n	8001742 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff77 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 800174c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 80cf 	bne.w	80018fa <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 80cb 	bne.w	80018fa <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800176c:	f043 0202 	orr.w	r2, r3, #2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff37 	bl	80015ec <LL_ADC_IsEnabled>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d115      	bne.n	80017b0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001784:	4865      	ldr	r0, [pc, #404]	; (800191c <HAL_ADC_Init+0x294>)
 8001786:	f7ff ff31 	bl	80015ec <LL_ADC_IsEnabled>
 800178a:	4604      	mov	r4, r0
 800178c:	4864      	ldr	r0, [pc, #400]	; (8001920 <HAL_ADC_Init+0x298>)
 800178e:	f7ff ff2d 	bl	80015ec <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	431c      	orrs	r4, r3
 8001796:	4863      	ldr	r0, [pc, #396]	; (8001924 <HAL_ADC_Init+0x29c>)
 8001798:	f7ff ff28 	bl	80015ec <LL_ADC_IsEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	4323      	orrs	r3, r4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4619      	mov	r1, r3
 80017aa:	485f      	ldr	r0, [pc, #380]	; (8001928 <HAL_ADC_Init+0x2a0>)
 80017ac:	f7ff fd82 	bl	80012b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7e5b      	ldrb	r3, [r3, #25]
 80017b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	045b      	lsls	r3, r3, #17
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_ADC_Init+0x2a4>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	430b      	orrs	r3, r1
 800181a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff0a 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 8001826:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff17 	bl	8001660 <LL_ADC_INJ_IsConversionOngoing>
 8001832:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13d      	bne.n	80018b6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d13a      	bne.n	80018b6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001844:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800184c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800185c:	f023 0302 	bic.w	r3, r3, #2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	430b      	orrs	r3, r1
 8001868:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001870:	2b01      	cmp	r3, #1
 8001872:	d118      	bne.n	80018a6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001896:	430a      	orrs	r2, r1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	e007      	b.n	80018b6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10c      	bne.n	80018d8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f023 010f 	bic.w	r1, r3, #15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
 80018d6:	e007      	b.n	80018e8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020f 	bic.w	r2, r2, #15
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800190a:	7ffb      	ldrb	r3, [r7, #31]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	20000000 	.word	0x20000000
 8001918:	053e2d63 	.word	0x053e2d63
 800191c:	50040000 	.word	0x50040000
 8001920:	50040100 	.word	0x50040100
 8001924:	50040200 	.word	0x50040200
 8001928:	50040300 	.word	0x50040300
 800192c:	fff0c007 	.word	0xfff0c007

08001930 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001938:	4893      	ldr	r0, [pc, #588]	; (8001b88 <HAL_ADC_Start_IT+0x258>)
 800193a:	f7ff fdd9 	bl	80014f0 <LL_ADC_GetMultimode>
 800193e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe78 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 8112 	bne.w	8001b76 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_ADC_Start_IT+0x30>
 800195c:	2302      	movs	r3, #2
 800195e:	e10f      	b.n	8001b80 <HAL_ADC_Start_IT+0x250>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 feb3 	bl	80026d4 <ADC_Enable>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 80f9 	bne.w	8001b6c <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <HAL_ADC_Start_IT+0x25c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d002      	beq.n	800199e <HAL_ADC_Start_IT+0x6e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	e000      	b.n	80019a0 <HAL_ADC_Start_IT+0x70>
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_ADC_Start_IT+0x260>)
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d002      	beq.n	80019ae <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f023 0206 	bic.w	r2, r3, #6
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
 80019d2:	e002      	b.n	80019da <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	221c      	movs	r2, #28
 80019e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 021c 	bic.w	r2, r2, #28
 80019f8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d108      	bne.n	8001a14 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0208 	orr.w	r2, r2, #8
 8001a10:	605a      	str	r2, [r3, #4]
          break;
 8001a12:	e008      	b.n	8001a26 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0204 	orr.w	r2, r2, #4
 8001a22:	605a      	str	r2, [r3, #4]
          break;
 8001a24:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0210 	orr.w	r2, r2, #16
 8001a3c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_ADC_Start_IT+0x25c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_Start_IT+0x11e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_Start_IT+0x120>
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_ADC_Start_IT+0x260>)
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d008      	beq.n	8001a6a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d002      	beq.n	8001a6a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b09      	cmp	r3, #9
 8001a68:	d13b      	bne.n	8001ae2 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d02d      	beq.n	8001ad4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d110      	bne.n	8001ab2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0220 	bic.w	r2, r2, #32
 8001a9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aae:	605a      	str	r2, [r3, #4]
              break;
 8001ab0:	e011      	b.n	8001ad6 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	605a      	str	r2, [r3, #4]
              break;
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001ad4:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fd99 	bl	8001612 <LL_ADC_REG_StartConversion>
 8001ae0:	e04d      	b.n	8001b7e <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_ADC_Start_IT+0x25c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d002      	beq.n	8001afe <HAL_ADC_Start_IT+0x1ce>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_Start_IT+0x1d0>
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_ADC_Start_IT+0x260>)
 8001b00:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d036      	beq.n	8001b7c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d110      	bne.n	8001b48 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0220 	bic.w	r2, r2, #32
 8001b34:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b44:	605a      	str	r2, [r3, #4]
              break;
 8001b46:	e01a      	b.n	8001b7e <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b56:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	605a      	str	r2, [r3, #4]
              break;
 8001b68:	bf00      	nop
 8001b6a:	e008      	b.n	8001b7e <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b74:	e003      	b.n	8001b7e <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
 8001b7a:	e000      	b.n	8001b7e <HAL_ADC_Start_IT+0x24e>
        }
 8001b7c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	50040300 	.word	0x50040300
 8001b8c:	50040100 	.word	0x50040100
 8001b90:	50040000 	.word	0x50040000

08001b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bcc:	4882      	ldr	r0, [pc, #520]	; (8001dd8 <HAL_ADC_IRQHandler+0x228>)
 8001bce:	f7ff fc8f 	bl	80014f0 <LL_ADC_GetMultimode>
 8001bd2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x5e>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fde9 	bl	80027d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x72>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10a      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8083 	beq.w	8001d34 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d07d      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fbaf 	bl	80013b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d062      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_ADC_IRQHandler+0x22c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d002      	beq.n	8001c70 <HAL_ADC_IRQHandler+0xc0>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_IRQHandler+0xc2>
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_ADC_IRQHandler+0x230>)
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d008      	beq.n	8001c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d002      	beq.n	8001c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d104      	bne.n	8001c96 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	e00c      	b.n	8001cb0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_ADC_IRQHandler+0x22c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d002      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0xf6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e000      	b.n	8001ca8 <HAL_ADC_IRQHandler+0xf8>
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <HAL_ADC_IRQHandler+0x230>)
 8001ca8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d135      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d12e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fcb4 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11a      	bne.n	8001d0e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020c 	bic.w	r2, r2, #12
 8001ce6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d112      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d0c:	e00b      	b.n	8001d26 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fc44 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	220c      	movs	r2, #12
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x198>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 809f 	beq.w	8001e92 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8099 	beq.w	8001e92 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fb57 	bl	8001430 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fb15 	bl	80013b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d8e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_ADC_IRQHandler+0x22c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d002      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x1f0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_IRQHandler+0x1f2>
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_ADC_IRQHandler+0x230>)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d002      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	d104      	bne.n	8001dc6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	e013      	b.n	8001dee <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_ADC_IRQHandler+0x22c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x234>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_ADC_IRQHandler+0x236>
 8001dd6:	bf00      	nop
 8001dd8:	50040300 	.word	0x50040300
 8001ddc:	50040100 	.word	0x50040100
 8001de0:	50040000 	.word	0x50040000
 8001de4:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_ADC_IRQHandler+0x42c>)
 8001de6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d142      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03f      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d13a      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	d133      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d12e      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fc18 	bl	8001660 <LL_ADC_INJ_IsConversionOngoing>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11a      	bne.n	8001e6c <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e44:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d112      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
 8001e6a:	e00b      	b.n	8001e84 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fc7f 	bl	8002788 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2260      	movs	r2, #96	; 0x60
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d011      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x310>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f896 	bl	8001fe4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x340>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fc65 	bl	80027b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x370>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fc57 	bl	80027c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d036      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3e8>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d031      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	e014      	b.n	8001f6c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f48:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <HAL_ADC_IRQHandler+0x430>)
 8001f4a:	f7ff fadf 	bl	800150c <LL_ADC_GetMultiDMATransfer>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001f54:	2301      	movs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e008      	b.n	8001f6c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10e      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f834 	bl	8001ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d018      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x424>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f043 0208 	orr.w	r2, r3, #8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fbe4 	bl	800279c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	50040000 	.word	0x50040000
 8001fe0:	50040300 	.word	0x50040300

08001fe4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0a6      	sub	sp, #152	; 0x98
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x22>
 800202a:	2302      	movs	r3, #2
 800202c:	e348      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x6b4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fafd 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 8329 	bne.w	800269a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d824      	bhi.n	800209a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	3b02      	subs	r3, #2
 8002056:	2b03      	cmp	r3, #3
 8002058:	d81b      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x86>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <HAL_ADC_ConfigChannel+0x54>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	08002071 	.word	0x08002071
 8002064:	08002079 	.word	0x08002079
 8002068:	08002081 	.word	0x08002081
 800206c:	08002089 	.word	0x08002089
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	220c      	movs	r2, #12
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	e011      	b.n	800209c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2212      	movs	r2, #18
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e00d      	b.n	800209c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2218      	movs	r2, #24
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e009      	b.n	800209c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	e004      	b.n	800209c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2206      	movs	r2, #6
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	e000      	b.n	800209c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800209a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff f998 	bl	80013de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fac1 	bl	800163a <LL_ADC_REG_IsConversionOngoing>
 80020b8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff facd 	bl	8001660 <LL_ADC_INJ_IsConversionOngoing>
 80020c6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8148 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 8143 	bne.w	8002364 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f7ff f9b3 	bl	8001456 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00a      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002122:	f7ff f8fb 	bl	800131c <LL_ADC_SetOffset>
 8002126:	e11d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f916 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x148>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f90b 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	f003 021f 	and.w	r2, r3, #31
 8002152:	e012      	b.n	800217a <HAL_ADC_ConfigChannel+0x16e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f900 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x186>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	e00a      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x19c>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80021a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f8e7 	bl	8001388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f8cd 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x1da>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f8c2 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	e010      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1fc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f8b7 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x214>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	e00a      	b.n	8002236 <HAL_ADC_ConfigChannel+0x22a>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	429a      	cmp	r2, r3
 8002238:	d106      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	2101      	movs	r1, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f8a0 	bl	8001388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2102      	movs	r1, #2
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f886 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x268>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2102      	movs	r1, #2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f87b 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	f003 021f 	and.w	r2, r3, #31
 8002272:	e010      	b.n	8002296 <HAL_ADC_ConfigChannel+0x28a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2102      	movs	r1, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f870 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800228c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x2a2>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	e00a      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x2b8>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d106      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f859 	bl	8001388 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2103      	movs	r1, #3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff f83f 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x2f6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2103      	movs	r1, #3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f834 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	e010      	b.n	8002324 <HAL_ADC_ConfigChannel+0x318>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2103      	movs	r1, #3
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f829 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_ConfigChannel+0x330>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	e00a      	b.n	8002352 <HAL_ADC_ConfigChannel+0x346>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800234a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	429a      	cmp	r2, r3
 8002354:	d106      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	2103      	movs	r1, #3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f812 	bl	8001388 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f93f 	bl	80015ec <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 810c 	bne.w	800258e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	461a      	mov	r2, r3
 8002384:	f7ff f890 	bl	80014a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4aad      	ldr	r2, [pc, #692]	; (8002644 <HAL_ADC_ConfigChannel+0x638>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f040 80fd 	bne.w	800258e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x3b0>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	3301      	adds	r3, #1
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e012      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x3d6>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2b09      	cmp	r3, #9
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d064      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x3f6>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	3301      	adds	r3, #1
 80023fa:	069b      	lsls	r3, r3, #26
 80023fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002400:	e00e      	b.n	8002420 <HAL_ADC_ConfigChannel+0x414>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	069b      	lsls	r3, r3, #26
 800241c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x434>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	e010      	b.n	8002462 <HAL_ADC_ConfigChannel+0x456>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	ea42 0103 	orr.w	r1, r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x47c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	e011      	b.n	80024ac <HAL_ADC_ConfigChannel+0x4a0>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
 80024ae:	e069      	b.n	8002584 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x4c0>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	069b      	lsls	r3, r3, #26
 80024c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ca:	e00e      	b.n	80024ea <HAL_ADC_ConfigChannel+0x4de>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	61fb      	str	r3, [r7, #28]
  return result;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_ADC_ConfigChannel+0x4fe>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	e010      	b.n	800252c <HAL_ADC_ConfigChannel+0x520>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	617b      	str	r3, [r7, #20]
  return result;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x54c>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	3b1e      	subs	r3, #30
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002556:	e014      	b.n	8002582 <HAL_ADC_ConfigChannel+0x576>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]
  return result;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3b1e      	subs	r3, #30
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002582:	430b      	orrs	r3, r1
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe ff64 	bl	8001456 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_ADC_ConfigChannel+0x63c>)
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 808c 	beq.w	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800259c:	482b      	ldr	r0, [pc, #172]	; (800264c <HAL_ADC_ConfigChannel+0x640>)
 800259e:	f7fe feaf 	bl	8001300 <LL_ADC_GetCommonPathInternalCh>
 80025a2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_ADC_ConfigChannel+0x644>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d12b      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x5fc>
 80025b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d125      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_ADC_ConfigChannel+0x648>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_ConfigChannel+0x5c4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_ADC_ConfigChannel+0x64c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d16e      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d8:	4619      	mov	r1, r3
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <HAL_ADC_ConfigChannel+0x640>)
 80025dc:	f7fe fe7d 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_ADC_ConfigChannel+0x650>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_ADC_ConfigChannel+0x654>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	099a      	lsrs	r2, r3, #6
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025f8:	e002      	b.n	8002600 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002606:	e052      	b.n	80026ae <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <HAL_ADC_ConfigChannel+0x658>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d12a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x65c>
 8002612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d124      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_ADC_ConfigChannel+0x648>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_ADC_ConfigChannel+0x626>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_ADC_ConfigChannel+0x64c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d13f      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	4619      	mov	r1, r3
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <HAL_ADC_ConfigChannel+0x640>)
 800263e:	f7fe fe4c 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002642:	e036      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x6a6>
 8002644:	407f0000 	.word	0x407f0000
 8002648:	80080000 	.word	0x80080000
 800264c:	50040300 	.word	0x50040300
 8002650:	c7520000 	.word	0xc7520000
 8002654:	50040000 	.word	0x50040000
 8002658:	50040200 	.word	0x50040200
 800265c:	20000000 	.word	0x20000000
 8002660:	053e2d63 	.word	0x053e2d63
 8002664:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <HAL_ADC_ConfigChannel+0x6bc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d120      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_ADC_ConfigChannel+0x6c0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d115      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002690:	4619      	mov	r1, r3
 8002692:	480f      	ldr	r0, [pc, #60]	; (80026d0 <HAL_ADC_ConfigChannel+0x6c4>)
 8002694:	f7fe fe21 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
 8002698:	e00c      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3798      	adds	r7, #152	; 0x98
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	80000001 	.word	0x80000001
 80026cc:	50040000 	.word	0x50040000
 80026d0:	50040300 	.word	0x50040300

080026d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe ff83 	bl	80015ec <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d146      	bne.n	800277a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <ADC_Enable+0xb0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e032      	b.n	800277c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ff52 	bl	80015c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002720:	f7fe fdbc 	bl	800129c <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002726:	e021      	b.n	800276c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe ff5d 	bl	80015ec <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe ff41 	bl	80015c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002742:	f7fe fdab 	bl	800129c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d90d      	bls.n	800276c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d1d6      	bne.n	8002728 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	8000003f 	.word	0x8000003f

08002788 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d005      	beq.n	8002a32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e029      	b.n	8002a86 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 020e 	bic.w	r2, r2, #14
 8002a40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f003 021c 	and.w	r2, r3, #28
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
    }
  }
  return status;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	e17f      	b.n	8002da0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8171 	beq.w	8002d9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d00b      	beq.n	8002ad8 <HAL_GPIO_Init+0x48>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d007      	beq.n	8002ad8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002acc:	2b11      	cmp	r3, #17
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b12      	cmp	r3, #18
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 0201 	and.w	r2, r3, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d118      	bne.n	8002b78 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x128>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d123      	bne.n	8002c00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	6939      	ldr	r1, [r7, #16]
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80ac 	beq.w	8002d9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c5a:	4a59      	ldr	r2, [pc, #356]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x242>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4e      	ldr	r2, [pc, #312]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x23e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x338>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x33c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x236>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	; (8002dd0 <HAL_GPIO_Init+0x340>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x232>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_GPIO_Init+0x344>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_GPIO_Init+0x348>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x22a>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce4:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d16:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f47f ae78 	bne.w	8002aa0 <HAL_GPIO_Init+0x10>
  }
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	48000400 	.word	0x48000400
 8002dc8:	48000800 	.word	0x48000800
 8002dcc:	48000c00 	.word	0x48000c00
 8002dd0:	48001000 	.word	0x48001000
 8002dd4:	48001400 	.word	0x48001400
 8002dd8:	48001800 	.word	0x48001800
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e58:	887a      	ldrh	r2, [r7, #2]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	619a      	str	r2, [r3, #24]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb74 	bl	8000580 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40007000 	.word	0x40007000

08002ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d130      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002edc:	d038      	beq.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2232      	movs	r2, #50	; 0x32
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9b      	lsrs	r3, r3, #18
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f04:	e002      	b.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d102      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f2      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2c:	d110      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e00f      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d007      	beq.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40007000 	.word	0x40007000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e3d4      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7e:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f88:	4b9e      	ldr	r3, [pc, #632]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80e4 	beq.w	8003168 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x4a>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	f040 808b 	bne.w	80030c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 8087 	bne.w	80030c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb6:	4b93      	ldr	r3, [pc, #588]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e3ac      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x7c>
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCC_OscConfig+0x88>
 8002fe8:	4b86      	ldr	r3, [pc, #536]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d223      	bcs.n	8003040 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd3f 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e38d      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300c:	4b7d      	ldr	r3, [pc, #500]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7c      	ldr	r2, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003012:	f043 0308 	orr.w	r3, r3, #8
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4977      	ldr	r1, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	4972      	ldr	r1, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
 800303e:	e025      	b.n	800308c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6f      	ldr	r2, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b6d      	ldr	r3, [pc, #436]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	496a      	ldr	r1, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	4b69      	ldr	r3, [pc, #420]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4965      	ldr	r1, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fcff 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e34d      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308c:	f000 fc36 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8003090:	4601      	mov	r1, r0
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_RCC_OscConfig+0x29c>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
 80030a8:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x2a0>)
 80030aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ac:	4b58      	ldr	r3, [pc, #352]	; (8003210 <HAL_RCC_OscConfig+0x2a4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe f8a7 	bl	8001204 <HAL_InitTick>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d052      	beq.n	8003166 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	e331      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d032      	beq.n	8003132 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f8e0 	bl	800129c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e0:	f7fe f8dc 	bl	800129c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e31a      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f2:	4b44      	ldr	r3, [pc, #272]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	493b      	ldr	r1, [pc, #236]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	4936      	ldr	r1, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e01a      	b.n	8003168 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a33      	ldr	r2, [pc, #204]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313e:	f7fe f8ad 	bl	800129c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003146:	f7fe f8a9 	bl	800129c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e2e7      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x1da>
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003166:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d074      	beq.n	800325e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d005      	beq.n	8003186 <HAL_RCC_OscConfig+0x21a>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d10e      	bne.n	800319e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d10b      	bne.n	800319e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d064      	beq.n	800325c <HAL_RCC_OscConfig+0x2f0>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d160      	bne.n	800325c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e2c4      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x24a>
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e01d      	b.n	80031f2 <HAL_RCC_OscConfig+0x286>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0x26e>
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e00b      	b.n	80031f2 <HAL_RCC_OscConfig+0x286>
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a06      	ldr	r2, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x298>)
 80031ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01c      	beq.n	8003234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe f84f 	bl	800129c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003200:	e011      	b.n	8003226 <HAL_RCC_OscConfig+0x2ba>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	08006ea4 	.word	0x08006ea4
 800320c:	20000000 	.word	0x20000000
 8003210:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe f842 	bl	800129c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e280      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003226:	4baf      	ldr	r3, [pc, #700]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x2a8>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe f832 	bl	800129c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe f82e 	bl	800129c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e26c      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324e:	4ba5      	ldr	r3, [pc, #660]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x2d0>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d060      	beq.n	800332c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x310>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d119      	bne.n	80032aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d116      	bne.n	80032aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	4b99      	ldr	r3, [pc, #612]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x328>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e249      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b93      	ldr	r3, [pc, #588]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	4990      	ldr	r1, [pc, #576]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	e040      	b.n	800332c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d023      	beq.n	80032fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b2:	4b8c      	ldr	r3, [pc, #560]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a8b      	ldr	r2, [pc, #556]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd ffed 	bl	800129c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fd ffe9 	bl	800129c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e227      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d8:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	497c      	ldr	r1, [pc, #496]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	e018      	b.n	800332c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b7a      	ldr	r3, [pc, #488]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a79      	ldr	r2, [pc, #484]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fd ffc9 	bl	800129c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7fd ffc5 	bl	800129c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e203      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003320:	4b70      	ldr	r3, [pc, #448]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003346:	4a67      	ldr	r2, [pc, #412]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd ffa4 	bl	800129c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd ffa0 	bl	800129c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1de      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <HAL_RCC_OscConfig+0x3ec>
 8003378:	e01b      	b.n	80033b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337a:	4b5a      	ldr	r3, [pc, #360]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd ff87 	bl	800129c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003392:	f7fd ff83 	bl	800129c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1c1      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ef      	bne.n	8003392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80a6 	beq.w	800350c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	; 0x58
 80033dc:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ec:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <HAL_RCC_OscConfig+0x57c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x57c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3a      	ldr	r2, [pc, #232]	; (80034e8 <HAL_RCC_OscConfig+0x57c>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003404:	f7fd ff4a 	bl	800129c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fd ff46 	bl	800129c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e184      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341e:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_RCC_OscConfig+0x57c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x4d8>
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003442:	e024      	b.n	800348e <HAL_RCC_OscConfig+0x522>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d110      	bne.n	800346e <HAL_RCC_OscConfig+0x502>
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	e00f      	b.n	800348e <HAL_RCC_OscConfig+0x522>
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 8003486:	f023 0304 	bic.w	r3, r3, #4
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd ff01 	bl	800129c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fd fefd 	bl	800129c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e139      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ed      	beq.n	800349e <HAL_RCC_OscConfig+0x532>
 80034c2:	e01a      	b.n	80034fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd feea 	bl	800129c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ca:	e00f      	b.n	80034ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fee6 	bl	800129c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d906      	bls.n	80034ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e122      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ec:	4b90      	ldr	r3, [pc, #576]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e8      	bne.n	80034cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	4a8a      	ldr	r2, [pc, #552]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8108 	beq.w	8003726 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	2b02      	cmp	r3, #2
 800351c:	f040 80d0 	bne.w	80036c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003520:	4b83      	ldr	r3, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d130      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	3b01      	subs	r3, #1
 8003540:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d127      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11f      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003560:	2a07      	cmp	r2, #7
 8003562:	bf14      	ite	ne
 8003564:	2201      	movne	r2, #1
 8003566:	2200      	moveq	r2, #0
 8003568:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d109      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d06e      	beq.n	8003674 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d069      	beq.n	8003670 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0b7      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5c      	ldr	r2, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c4:	f7fd fe6a 	bl	800129c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd fe66 	bl	800129c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0a4      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035de:	4b54      	ldr	r3, [pc, #336]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ea:	4b51      	ldr	r3, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x7c8>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003604:	0212      	lsls	r2, r2, #8
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
 8003610:	0552      	lsls	r2, r2, #21
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003618:	0852      	lsrs	r2, r2, #1
 800361a:	3a01      	subs	r2, #1
 800361c:	0652      	lsls	r2, r2, #25
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003624:	0912      	lsrs	r2, r2, #4
 8003626:	0452      	lsls	r2, r2, #17
 8003628:	430a      	orrs	r2, r1
 800362a:	4941      	ldr	r1, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003630:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003648:	f7fd fe28 	bl	800129c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fe24 	bl	800129c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e062      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366e:	e05a      	b.n	8003726 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e059      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d152      	bne.n	8003726 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003696:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003698:	f7fd fe00 	bl	800129c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd fdfc 	bl	800129c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e03a      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x734>
 80036be:	e032      	b.n	8003726 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d02d      	beq.n	8003722 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 80036f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fdcf 	bl	800129c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fd fdcb 	bl	800129c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e009      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x7c4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x796>
 8003720:	e001      	b.n	8003726 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	f99d808c 	.word	0xf99d808c

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0c8      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4961      	ldr	r1, [pc, #388]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b5f      	ldr	r3, [pc, #380]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b0      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04c      	beq.n	8003822 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003790:	4b56      	ldr	r3, [pc, #344]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d121      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e09e      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d115      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e092      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c0:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e086      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	4b46      	ldr	r3, [pc, #280]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e07e      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e0:	4b42      	ldr	r3, [pc, #264]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 0203 	bic.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	493f      	ldr	r1, [pc, #252]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f2:	f7fd fd53 	bl	800129c <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fa:	f7fd fd4f 	bl	800129c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e066      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 020c 	and.w	r2, r3, #12
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	429a      	cmp	r2, r3
 8003820:	d1eb      	bne.n	80037fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	492c      	ldr	r1, [pc, #176]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d210      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4924      	ldr	r1, [pc, #144]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e036      	b.n	80038de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4918      	ldr	r1, [pc, #96]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4910      	ldr	r1, [pc, #64]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ae:	f000 f825 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038b2:	4601      	mov	r1, r0
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_RCC_ClockConfig+0x1b4>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fc96 	bl	8001204 <HAL_InitTick>
 80038d8:	4603      	mov	r3, r0
 80038da:	72fb      	strb	r3, [r7, #11]

  return status;
 80038dc:	7afb      	ldrb	r3, [r7, #11]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08006ea4 	.word	0x08006ea4
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x34>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d121      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d11e      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800393e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	e005      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d102      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e004      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d101      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003982:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d133      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800399a:	2b03      	cmp	r3, #3
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800399e:	e005      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039a2:	617b      	str	r3, [r7, #20]
      break;
 80039a4:	e005      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x110>)
 80039a8:	617b      	str	r3, [r7, #20]
      break;
 80039aa:	e002      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	617b      	str	r3, [r7, #20]
      break;
 80039b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	3301      	adds	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	fb02 f203 	mul.w	r2, r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x104>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	0e5b      	lsrs	r3, r3, #25
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	3301      	adds	r3, #1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f2:	69bb      	ldr	r3, [r7, #24]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3724      	adds	r7, #36	; 0x24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08006ebc 	.word	0x08006ebc
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4601      	mov	r1, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08006eb4 	.word	0x08006eb4

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a58:	f7ff ffda 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08006eb4 	.word	0x08006eb4

08003a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a98:	f7ff fa04 	bl	8002ea4 <HAL_PWREx_GetVoltageRange>
 8003a9c:	6178      	str	r0, [r7, #20]
 8003a9e:	e014      	b.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab8:	f7ff f9f4 	bl	8002ea4 <HAL_PWREx_GetVoltageRange>
 8003abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad0:	d10b      	bne.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d919      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2ba0      	cmp	r3, #160	; 0xa0
 8003adc:	d902      	bls.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ade:	2302      	movs	r3, #2
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e013      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e010      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	d902      	bls.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003af0:	2303      	movs	r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e00a      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d102      	bne.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e004      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d101      	bne.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 0207 	bic.w	r2, r3, #7
 8003b14:	4909      	ldr	r1, [pc, #36]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03f      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d01c      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6a:	d802      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b70:	e01f      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b76:	d003      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b7e:	e018      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b80:	4b85      	ldr	r3, [pc, #532]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a84      	ldr	r2, [pc, #528]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8c:	e015      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fab9 	bl	800410c <RCCEx_PLLSAI1_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9e:	e00c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3320      	adds	r3, #32
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fba0 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc0:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bce:	4972      	ldr	r1, [pc, #456]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bd6:	e001      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d03f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf0:	d01c      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf6:	d802      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003bfc:	e01f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c02:	d003      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003c04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c08:	d01c      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c0c:	4b62      	ldr	r3, [pc, #392]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a61      	ldr	r2, [pc, #388]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c18:	e015      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fa73 	bl	800410c <RCCEx_PLLSAI1_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2a:	e00c      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3320      	adds	r3, #32
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fb5a 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	74fb      	strb	r3, [r7, #19]
      break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c4c:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5a:	494f      	ldr	r1, [pc, #316]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80a0 	beq.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c7a:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	4a40      	ldr	r2, [pc, #256]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9c:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3a      	ldr	r2, [pc, #232]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb8:	f7fd faf0 	bl	800129c <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fd faec 	bl	800129c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d902      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ef      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d15c      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01f      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d019      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d04:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fd faab 	bl	800129c <HAL_GetTick>
 8003d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d48:	e00b      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd faa7 	bl	800129c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d60:	e006      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ec      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d86:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d8e:	e009      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da4:	7c7b      	ldrb	r3, [r7, #17]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003daa:	4b9e      	ldr	r3, [pc, #632]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	4a9d      	ldr	r2, [pc, #628]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc2:	4b98      	ldr	r3, [pc, #608]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f023 0203 	bic.w	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	4994      	ldr	r1, [pc, #592]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de4:	4b8f      	ldr	r3, [pc, #572]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f023 020c 	bic.w	r2, r3, #12
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	498c      	ldr	r1, [pc, #560]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e06:	4b87      	ldr	r3, [pc, #540]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4983      	ldr	r1, [pc, #524]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e28:	4b7e      	ldr	r3, [pc, #504]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	497b      	ldr	r1, [pc, #492]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	4972      	ldr	r1, [pc, #456]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6c:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	496a      	ldr	r1, [pc, #424]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	4961      	ldr	r1, [pc, #388]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb0:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	4959      	ldr	r1, [pc, #356]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed2:	4b54      	ldr	r3, [pc, #336]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	4950      	ldr	r1, [pc, #320]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	4948      	ldr	r1, [pc, #288]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	493f      	ldr	r1, [pc, #252]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d028      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f38:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f56:	d106      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a31      	ldr	r2, [pc, #196]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
 8003f64:	e011      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f8c8 	bl	800410c <RCCEx_PLLSAI1_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d028      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f96:	4b23      	ldr	r3, [pc, #140]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	491f      	ldr	r1, [pc, #124]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc0:	60d3      	str	r3, [r2, #12]
 8003fc2:	e011      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f899 	bl	800410c <RCCEx_PLLSAI1_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02b      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	4908      	ldr	r1, [pc, #32]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004012:	d109      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a02      	ldr	r2, [pc, #8]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401e:	60d3      	str	r3, [r2, #12]
 8004020:	e014      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f867 	bl	800410c <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004066:	4928      	ldr	r1, [pc, #160]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004076:	d10d      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f844 	bl	800410c <RCCEx_PLLSAI1_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	74bb      	strb	r3, [r7, #18]
 8004092:	e011      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3320      	adds	r3, #32
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f921 	bl	80042ec <RCCEx_PLLSAI2_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	490d      	ldr	r1, [pc, #52]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f6:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000

0800410c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411a:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004126:	4b70      	ldr	r3, [pc, #448]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d10d      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
       ||
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
       ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d044      	beq.n	80041dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e041      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d00c      	beq.n	800417a <RCCEx_PLLSAI1_Config+0x6e>
 8004160:	2b03      	cmp	r3, #3
 8004162:	d013      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x80>
 8004164:	2b01      	cmp	r3, #1
 8004166:	d120      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004168:	4b5f      	ldr	r3, [pc, #380]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11d      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e01a      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800417a:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418a:	e013      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a8:	e006      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      break;
 80041ae:	e004      	b.n	80041ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c0:	4b49      	ldr	r3, [pc, #292]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	430b      	orrs	r3, r1
 80041d6:	4944      	ldr	r1, [pc, #272]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d17d      	bne.n	80042de <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ee:	f7fd f855 	bl	800129c <HAL_GetTick>
 80041f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f4:	e009      	b.n	800420a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f6:	f7fd f851 	bl	800129c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d902      	bls.n	800420a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	73fb      	strb	r3, [r7, #15]
        break;
 8004208:	e005      	b.n	8004216 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ef      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d160      	bne.n	80042de <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d111      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6892      	ldr	r2, [r2, #8]
 8004232:	0211      	lsls	r1, r2, #8
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68d2      	ldr	r2, [r2, #12]
 8004238:	0912      	lsrs	r2, r2, #4
 800423a:	0452      	lsls	r2, r2, #17
 800423c:	430a      	orrs	r2, r1
 800423e:	492a      	ldr	r1, [pc, #168]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	610b      	str	r3, [r1, #16]
 8004244:	e027      	b.n	8004296 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d112      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424c:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004254:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6892      	ldr	r2, [r2, #8]
 800425c:	0211      	lsls	r1, r2, #8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0552      	lsls	r2, r2, #21
 8004268:	430a      	orrs	r2, r1
 800426a:	491f      	ldr	r1, [pc, #124]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	610b      	str	r3, [r1, #16]
 8004270:	e011      	b.n	8004296 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800427a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	0211      	lsls	r1, r2, #8
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6952      	ldr	r2, [r2, #20]
 8004288:	0852      	lsrs	r2, r2, #1
 800428a:	3a01      	subs	r2, #1
 800428c:	0652      	lsls	r2, r2, #25
 800428e:	430a      	orrs	r2, r1
 8004290:	4915      	ldr	r1, [pc, #84]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fc fffb 	bl	800129c <HAL_GetTick>
 80042a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a8:	e009      	b.n	80042be <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042aa:	f7fc fff7 	bl	800129c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d902      	bls.n	80042be <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	73fb      	strb	r3, [r7, #15]
          break;
 80042bc:	e005      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000

080042ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042fa:	4b68      	ldr	r3, [pc, #416]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004306:	4b65      	ldr	r3, [pc, #404]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
       ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
       ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d044      	beq.n	80043bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e041      	b.n	80043bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d00c      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x6e>
 8004340:	2b03      	cmp	r3, #3
 8004342:	d013      	beq.n	800436c <RCCEx_PLLSAI2_Config+0x80>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d120      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004348:	4b54      	ldr	r3, [pc, #336]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11d      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e01a      	b.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800435a:	4b50      	ldr	r3, [pc, #320]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436a:	e013      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436c:	4b4b      	ldr	r3, [pc, #300]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004378:	4b48      	ldr	r3, [pc, #288]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004388:	e006      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      break;
 800438e:	e004      	b.n	800439a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004398:	bf00      	nop
    }

    if(status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	430b      	orrs	r3, r1
 80043b6:	4939      	ldr	r1, [pc, #228]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d167      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a35      	ldr	r2, [pc, #212]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fc ff65 	bl	800129c <HAL_GetTick>
 80043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d4:	e009      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d6:	f7fc ff61 	bl	800129c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d902      	bls.n	80043ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	73fb      	strb	r3, [r7, #15]
        break;
 80043e8:	e005      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ef      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d14a      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d111      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800440a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6892      	ldr	r2, [r2, #8]
 8004412:	0211      	lsls	r1, r2, #8
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68d2      	ldr	r2, [r2, #12]
 8004418:	0912      	lsrs	r2, r2, #4
 800441a:	0452      	lsls	r2, r2, #17
 800441c:	430a      	orrs	r2, r1
 800441e:	491f      	ldr	r1, [pc, #124]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	614b      	str	r3, [r1, #20]
 8004424:	e011      	b.n	800444a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800442e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6892      	ldr	r2, [r2, #8]
 8004436:	0211      	lsls	r1, r2, #8
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6912      	ldr	r2, [r2, #16]
 800443c:	0852      	lsrs	r2, r2, #1
 800443e:	3a01      	subs	r2, #1
 8004440:	0652      	lsls	r2, r2, #25
 8004442:	430a      	orrs	r2, r1
 8004444:	4915      	ldr	r1, [pc, #84]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fc ff21 	bl	800129c <HAL_GetTick>
 800445a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445c:	e009      	b.n	8004472 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445e:	f7fc ff1d 	bl	800129c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d902      	bls.n	8004472 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	73fb      	strb	r3, [r7, #15]
          break;
 8004470:	e005      	b.n	800447e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0ef      	beq.n	800445e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <RCCEx_PLLSAI2_Config+0x1b0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e01d      	b.n	80044ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fcf6 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fc18 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_TIM_Base_Start_IT+0x50>)
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b06      	cmp	r3, #6
 8004520:	d00b      	beq.n	800453a <HAL_TIM_Base_Start_IT+0x42>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d007      	beq.n	800453a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	00010007 	.word	0x00010007

0800454c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e01d      	b.n	800459a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fc7c 	bl	8000e70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fbc2 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b0c      	cmp	r3, #12
 80045b2:	d841      	bhi.n	8004638 <HAL_TIM_PWM_Start_IT+0x94>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <HAL_TIM_PWM_Start_IT+0x18>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	08004639 	.word	0x08004639
 80045c4:	08004639 	.word	0x08004639
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004603 	.word	0x08004603
 80045d0:	08004639 	.word	0x08004639
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004615 	.word	0x08004615
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004639 	.word	0x08004639
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004627 	.word	0x08004627
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0202 	orr.w	r2, r2, #2
 80045fe:	60da      	str	r2, [r3, #12]
      break;
 8004600:	e01b      	b.n	800463a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0204 	orr.w	r2, r2, #4
 8004610:	60da      	str	r2, [r3, #12]
      break;
 8004612:	e012      	b.n	800463a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0208 	orr.w	r2, r2, #8
 8004622:	60da      	str	r2, [r3, #12]
      break;
 8004624:	e009      	b.n	800463a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0210 	orr.w	r2, r2, #16
 8004634:	60da      	str	r2, [r3, #12]
      break;
 8004636:	e000      	b.n	800463a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004638:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ff70 	bl	8005528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <HAL_TIM_PWM_Start_IT+0x124>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_TIM_PWM_Start_IT+0xd6>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_TIM_PWM_Start_IT+0x128>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIM_PWM_Start_IT+0xd6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_TIM_PWM_Start_IT+0x12c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIM_PWM_Start_IT+0xd6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_TIM_PWM_Start_IT+0x130>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIM_PWM_Start_IT+0xd6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIM_PWM_Start_IT+0x134>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_TIM_PWM_Start_IT+0xda>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_TIM_PWM_Start_IT+0xdc>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_TIM_PWM_Start_IT+0x138>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d00b      	beq.n	80046be <HAL_TIM_PWM_Start_IT+0x11a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d007      	beq.n	80046be <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d122      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d11b      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0202 	mvn.w	r2, #2
 800470c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fad7 	bl	8004cd6 <HAL_TIM_IC_CaptureCallback>
 8004728:	e005      	b.n	8004736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fac9 	bl	8004cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fada 	bl	8004cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d122      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b04      	cmp	r3, #4
 8004756:	d11b      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0204 	mvn.w	r2, #4
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 faad 	bl	8004cd6 <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fa9f 	bl	8004cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fab0 	bl	8004cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b08      	cmp	r3, #8
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0208 	mvn.w	r2, #8
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa83 	bl	8004cd6 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa75 	bl	8004cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa86 	bl	8004cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa59 	bl	8004cd6 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa4b 	bl	8004cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa5c 	bl	8004cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10e      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0201 	mvn.w	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fb fec4 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d10e      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d107      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 ff04 	bl	8005698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fef7 	bl	80056ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fa0a 	bl	8004cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0220 	mvn.w	r2, #32
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 feb7 	bl	8005684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004936:	2302      	movs	r3, #2
 8004938:	e105      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x226>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b14      	cmp	r3, #20
 800494e:	f200 80f0 	bhi.w	8004b32 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	080049ad 	.word	0x080049ad
 800495c:	08004b33 	.word	0x08004b33
 8004960:	08004b33 	.word	0x08004b33
 8004964:	08004b33 	.word	0x08004b33
 8004968:	080049ed 	.word	0x080049ed
 800496c:	08004b33 	.word	0x08004b33
 8004970:	08004b33 	.word	0x08004b33
 8004974:	08004b33 	.word	0x08004b33
 8004978:	08004a2f 	.word	0x08004a2f
 800497c:	08004b33 	.word	0x08004b33
 8004980:	08004b33 	.word	0x08004b33
 8004984:	08004b33 	.word	0x08004b33
 8004988:	08004a6f 	.word	0x08004a6f
 800498c:	08004b33 	.word	0x08004b33
 8004990:	08004b33 	.word	0x08004b33
 8004994:	08004b33 	.word	0x08004b33
 8004998:	08004ab1 	.word	0x08004ab1
 800499c:	08004b33 	.word	0x08004b33
 80049a0:	08004b33 	.word	0x08004b33
 80049a4:	08004b33 	.word	0x08004b33
 80049a8:	08004af1 	.word	0x08004af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa48 	bl	8004e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	619a      	str	r2, [r3, #24]
      break;
 80049ea:	e0a3      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fab8 	bl	8004f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	619a      	str	r2, [r3, #24]
      break;
 8004a2c:	e082      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fb21 	bl	800507c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0208 	orr.w	r2, r2, #8
 8004a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0204 	bic.w	r2, r2, #4
 8004a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69d9      	ldr	r1, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
      break;
 8004a6c:	e062      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb89 	bl	800518c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	61da      	str	r2, [r3, #28]
      break;
 8004aae:	e041      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fbd2 	bl	8005260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aee:	e021      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fc16 	bl	8005328 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b30:	e000      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004b32:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIM_ConfigClockSource+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e0a8      	b.n	8004cba <HAL_TIM_ConfigClockSource+0x16a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d067      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x124>
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d80b      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x70>
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d073      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0x144>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d802      	bhi.n	8004bb6 <HAL_TIM_ConfigClockSource+0x66>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d06f      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004bb4:	e078      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d06c      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0x144>
 8004bba:	2b30      	cmp	r3, #48	; 0x30
 8004bbc:	d06a      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004bbe:	e073      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d00d      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0x90>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d804      	bhi.n	8004bd2 <HAL_TIM_ConfigClockSource+0x82>
 8004bc8:	2b50      	cmp	r3, #80	; 0x50
 8004bca:	d033      	beq.n	8004c34 <HAL_TIM_ConfigClockSource+0xe4>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d041      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004bd0:	e06a      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d066      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x156>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d017      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004bde:	e063      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f000 fc7a 	bl	80054e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
      break;
 8004c0c:	e04c      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 fc63 	bl	80054e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c30:	609a      	str	r2, [r3, #8]
      break;
 8004c32:	e039      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f000 fbd7 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2150      	movs	r1, #80	; 0x50
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fc30 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004c52:	e029      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f000 fbf6 	bl	8005452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2160      	movs	r1, #96	; 0x60
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fc20 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004c72:	e019      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f000 fbb7 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fc10 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004c92:	e009      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 fc07 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a40      	ldr	r2, [pc, #256]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01f      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d01b      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d017      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <TIM_Base_SetConfig+0x128>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <TIM_Base_SetConfig+0x12c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <TIM_Base_SetConfig+0x130>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <TIM_Base_SetConfig+0x128>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <TIM_Base_SetConfig+0x12c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0f      	ldr	r2, [pc, #60]	; (8004e44 <TIM_Base_SetConfig+0x130>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d103      	bne.n	8004e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40013400 	.word	0x40013400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800

08004e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0302 	bic.w	r3, r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <TIM_OC1_SetConfig+0x10c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <TIM_OC1_SetConfig+0x110>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x80>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <TIM_OC1_SetConfig+0x114>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x80>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <TIM_OC1_SetConfig+0x118>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a28      	ldr	r2, [pc, #160]	; (8004f64 <TIM_OC1_SetConfig+0x11c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <TIM_OC1_SetConfig+0x10c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_OC1_SetConfig+0xc2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <TIM_OC1_SetConfig+0x110>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_OC1_SetConfig+0xc2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <TIM_OC1_SetConfig+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_OC1_SetConfig+0xc2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <TIM_OC1_SetConfig+0x118>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0xc2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <TIM_OC1_SetConfig+0x11c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800

08004f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0210 	bic.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0320 	bic.w	r3, r3, #32
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a28      	ldr	r2, [pc, #160]	; (8005068 <TIM_OC2_SetConfig+0x100>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_OC2_SetConfig+0x6c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a27      	ldr	r2, [pc, #156]	; (800506c <TIM_OC2_SetConfig+0x104>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10d      	bne.n	8004ff0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <TIM_OC2_SetConfig+0x100>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00f      	beq.n	8005018 <TIM_OC2_SetConfig+0xb0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	; (800506c <TIM_OC2_SetConfig+0x104>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_OC2_SetConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <TIM_OC2_SetConfig+0x108>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_OC2_SetConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <TIM_OC2_SetConfig+0x10c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_OC2_SetConfig+0xb0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a19      	ldr	r2, [pc, #100]	; (8005078 <TIM_OC2_SetConfig+0x110>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d113      	bne.n	8005040 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a27      	ldr	r2, [pc, #156]	; (8005178 <TIM_OC3_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC3_SetConfig+0x6a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <TIM_OC3_SetConfig+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10d      	bne.n	8005102 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <TIM_OC3_SetConfig+0xfc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_OC3_SetConfig+0xae>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <TIM_OC3_SetConfig+0x100>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_OC3_SetConfig+0xae>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <TIM_OC3_SetConfig+0x104>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_OC3_SetConfig+0xae>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <TIM_OC3_SetConfig+0x108>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_OC3_SetConfig+0xae>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <TIM_OC3_SetConfig+0x10c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d113      	bne.n	8005152 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <TIM_OC4_SetConfig+0xc0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00f      	beq.n	8005210 <TIM_OC4_SetConfig+0x84>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a17      	ldr	r2, [pc, #92]	; (8005250 <TIM_OC4_SetConfig+0xc4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_OC4_SetConfig+0x84>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a16      	ldr	r2, [pc, #88]	; (8005254 <TIM_OC4_SetConfig+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_OC4_SetConfig+0x84>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a15      	ldr	r2, [pc, #84]	; (8005258 <TIM_OC4_SetConfig+0xcc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_OC4_SetConfig+0x84>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a14      	ldr	r2, [pc, #80]	; (800525c <TIM_OC4_SetConfig+0xd0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d109      	bne.n	8005224 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40013400 	.word	0x40013400
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <TIM_OC5_SetConfig+0xb4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_OC5_SetConfig+0x7a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a16      	ldr	r2, [pc, #88]	; (8005318 <TIM_OC5_SetConfig+0xb8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_OC5_SetConfig+0x7a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <TIM_OC5_SetConfig+0xbc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_OC5_SetConfig+0x7a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <TIM_OC5_SetConfig+0xc0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC5_SetConfig+0x7a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <TIM_OC5_SetConfig+0xc4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d109      	bne.n	80052ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <TIM_OC6_SetConfig+0xb8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_OC6_SetConfig+0x7c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <TIM_OC6_SetConfig+0xbc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_OC6_SetConfig+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <TIM_OC6_SetConfig+0xc0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC6_SetConfig+0x7c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <TIM_OC6_SetConfig+0xc4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC6_SetConfig+0x7c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <TIM_OC6_SetConfig+0xc8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d109      	bne.n	80053b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0210 	bic.w	r2, r3, #16
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2201      	movs	r2, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005588:	2302      	movs	r3, #2
 800558a:	e068      	b.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2e      	ldr	r2, [pc, #184]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d108      	bne.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01d      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d018      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10c      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40014000 	.word	0x40014000

08005684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e040      	b.n	8005754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fb fc42 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9e2 	bl	8005ac8 <UART_SetConfig>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e022      	b.n	8005754 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fd48 	bl	80061ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800572a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800573a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fdcf 	bl	80062f0 <UART_CheckIdleState>
 8005752:	4603      	mov	r3, r0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576e:	2b20      	cmp	r3, #32
 8005770:	d144      	bne.n	80057fc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_UART_Transmit_IT+0x22>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e03d      	b.n	80057fe <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit_IT+0x34>
 800578c:	2302      	movs	r3, #2
 800578e:	e036      	b.n	80057fe <HAL_UART_Transmit_IT+0xa2>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2221      	movs	r2, #33	; 0x21
 80057be:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d107      	bne.n	80057da <HAL_UART_Transmit_IT+0x7e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <HAL_UART_Transmit_IT+0xb0>)
 80057d6:	665a      	str	r2, [r3, #100]	; 0x64
 80057d8:	e002      	b.n	80057e0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <HAL_UART_Transmit_IT+0xb4>)
 80057de:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	08006551 	.word	0x08006551
 8005810:	080064dd 	.word	0x080064dd

08005814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	f640 030f 	movw	r3, #2063	; 0x80f
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d113      	bne.n	800586c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00e      	beq.n	800586c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8114 	beq.w	8005a8a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
      }
      return;
 800586a:	e10e      	b.n	8005a8a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80d6 	beq.w	8005a20 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80cb 	beq.w	8005a20 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <HAL_UART_IRQHandler+0x9e>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <HAL_UART_IRQHandler+0xc6>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2202      	movs	r2, #2
 80058cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0xee>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2204      	movs	r2, #4
 80058f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	f043 0202 	orr.w	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2208      	movs	r2, #8
 8005926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592c:	f043 0208 	orr.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00f      	beq.n	800595e <HAL_UART_IRQHandler+0x14a>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8093 	beq.w	8005a8e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005990:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d004      	beq.n	80059aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d031      	beq.n	8005a0e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fd60 	bl	8006470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d123      	bne.n	8005a06 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d013      	beq.n	80059fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <HAL_UART_IRQHandler+0x288>)
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd f813 	bl	8002a0e <HAL_DMA_Abort_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e00e      	b.n	8005a1c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f858 	bl	8005ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e00a      	b.n	8005a1c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f854 	bl	8005ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e006      	b.n	8005a1c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f850 	bl	8005ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005a1a:	e038      	b.n	8005a8e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	bf00      	nop
    return;
 8005a1e:	e036      	b.n	8005a8e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <HAL_UART_IRQHandler+0x232>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fddd 	bl	80065fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a44:	e026      	b.n	8005a94 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00d      	beq.n	8005a6c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
    }
    return;
 8005a6a:	e012      	b.n	8005a92 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <HAL_UART_IRQHandler+0x280>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fda3 	bl	80065cc <UART_EndTransmit_IT>
    return;
 8005a86:	bf00      	nop
 8005a88:	e004      	b.n	8005a94 <HAL_UART_IRQHandler+0x280>
      return;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <HAL_UART_IRQHandler+0x280>
    return;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <HAL_UART_IRQHandler+0x280>
    return;
 8005a92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	080064b1 	.word	0x080064b1

08005aa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005acc:	b08a      	sub	sp, #40	; 0x28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4bb8      	ldr	r3, [pc, #736]	; (8005de0 <UART_SetConfig+0x318>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4aae      	ldr	r2, [pc, #696]	; (8005de4 <UART_SetConfig+0x31c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	4313      	orrs	r3, r2
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4aa5      	ldr	r2, [pc, #660]	; (8005de8 <UART_SetConfig+0x320>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d126      	bne.n	8005ba6 <UART_SetConfig+0xde>
 8005b58:	4ba4      	ldr	r3, [pc, #656]	; (8005dec <UART_SetConfig+0x324>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d81a      	bhi.n	8005b9c <UART_SetConfig+0xd4>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0xa4>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005b8d 	.word	0x08005b8d
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e105      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005b84:	2302      	movs	r3, #2
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e101      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b92:	e0fd      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005b94:	2308      	movs	r3, #8
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9a:	e0f9      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba2:	bf00      	nop
 8005ba4:	e0f4      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a91      	ldr	r2, [pc, #580]	; (8005df0 <UART_SetConfig+0x328>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d138      	bne.n	8005c22 <UART_SetConfig+0x15a>
 8005bb0:	4b8e      	ldr	r3, [pc, #568]	; (8005dec <UART_SetConfig+0x324>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d82c      	bhi.n	8005c18 <UART_SetConfig+0x150>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xfc>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005c19 	.word	0x08005c19
 8005bd0:	08005c19 	.word	0x08005c19
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005c19 	.word	0x08005c19
 8005bdc:	08005c19 	.word	0x08005c19
 8005be0:	08005c19 	.word	0x08005c19
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	08005c19 	.word	0x08005c19
 8005bec:	08005c19 	.word	0x08005c19
 8005bf0:	08005c19 	.word	0x08005c19
 8005bf4:	08005c11 	.word	0x08005c11
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e0c7      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c00:	2302      	movs	r3, #2
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e0c3      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c0e:	e0bf      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c16:	e0bb      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1e:	bf00      	nop
 8005c20:	e0b6      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	; (8005df4 <UART_SetConfig+0x32c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d125      	bne.n	8005c78 <UART_SetConfig+0x1b0>
 8005c2c:	4b6f      	ldr	r3, [pc, #444]	; (8005dec <UART_SetConfig+0x324>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d011      	beq.n	8005c5e <UART_SetConfig+0x196>
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d802      	bhi.n	8005c44 <UART_SetConfig+0x17c>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <UART_SetConfig+0x186>
 8005c42:	e014      	b.n	8005c6e <UART_SetConfig+0x1a6>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d006      	beq.n	8005c56 <UART_SetConfig+0x18e>
 8005c48:	2b30      	cmp	r3, #48	; 0x30
 8005c4a:	d00c      	beq.n	8005c66 <UART_SetConfig+0x19e>
 8005c4c:	e00f      	b.n	8005c6e <UART_SetConfig+0x1a6>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c54:	e09c      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5c:	e098      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c5e:	2304      	movs	r3, #4
 8005c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c64:	e094      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c66:	2308      	movs	r3, #8
 8005c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6c:	e090      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c6e:	2310      	movs	r3, #16
 8005c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c74:	bf00      	nop
 8005c76:	e08b      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5e      	ldr	r2, [pc, #376]	; (8005df8 <UART_SetConfig+0x330>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d125      	bne.n	8005cce <UART_SetConfig+0x206>
 8005c82:	4b5a      	ldr	r3, [pc, #360]	; (8005dec <UART_SetConfig+0x324>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d011      	beq.n	8005cb4 <UART_SetConfig+0x1ec>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d802      	bhi.n	8005c9a <UART_SetConfig+0x1d2>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <UART_SetConfig+0x1dc>
 8005c98:	e014      	b.n	8005cc4 <UART_SetConfig+0x1fc>
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x1e4>
 8005c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005ca0:	d00c      	beq.n	8005cbc <UART_SetConfig+0x1f4>
 8005ca2:	e00f      	b.n	8005cc4 <UART_SetConfig+0x1fc>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e071      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb2:	e06d      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cba:	e069      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e065      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	bf00      	nop
 8005ccc:	e060      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <UART_SetConfig+0x334>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d129      	bne.n	8005d2c <UART_SetConfig+0x264>
 8005cd8:	4b44      	ldr	r3, [pc, #272]	; (8005dec <UART_SetConfig+0x324>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d014      	beq.n	8005d12 <UART_SetConfig+0x24a>
 8005ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cec:	d802      	bhi.n	8005cf4 <UART_SetConfig+0x22c>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <UART_SetConfig+0x23a>
 8005cf2:	e016      	b.n	8005d22 <UART_SetConfig+0x25a>
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf8:	d007      	beq.n	8005d0a <UART_SetConfig+0x242>
 8005cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfe:	d00c      	beq.n	8005d1a <UART_SetConfig+0x252>
 8005d00:	e00f      	b.n	8005d22 <UART_SetConfig+0x25a>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d08:	e042      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d10:	e03e      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d12:	2304      	movs	r3, #4
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d18:	e03a      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d20:	e036      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d22:	2310      	movs	r3, #16
 8005d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d28:	bf00      	nop
 8005d2a:	e031      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <UART_SetConfig+0x31c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d129      	bne.n	8005d8a <UART_SetConfig+0x2c2>
 8005d36:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <UART_SetConfig+0x324>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d014      	beq.n	8005d70 <UART_SetConfig+0x2a8>
 8005d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4a:	d802      	bhi.n	8005d52 <UART_SetConfig+0x28a>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <UART_SetConfig+0x298>
 8005d50:	e016      	b.n	8005d80 <UART_SetConfig+0x2b8>
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	d007      	beq.n	8005d68 <UART_SetConfig+0x2a0>
 8005d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d5c:	d00c      	beq.n	8005d78 <UART_SetConfig+0x2b0>
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x2b8>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d66:	e013      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e00f      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e00b      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e007      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d86:	bf00      	nop
 8005d88:	e002      	b.n	8005d90 <UART_SetConfig+0x2c8>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <UART_SetConfig+0x31c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f040 80fe 	bne.w	8005f98 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d837      	bhi.n	8005e14 <UART_SetConfig+0x34c>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x2e4>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005e15 	.word	0x08005e15
 8005dbc:	08005e05 	.word	0x08005e05
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005e15 	.word	0x08005e15
 8005dc8:	08005e15 	.word	0x08005e15
 8005dcc:	08005e0d 	.word	0x08005e0d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fd fe2a 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dd6:	e020      	b.n	8005e1a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <UART_SetConfig+0x338>)
 8005dda:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ddc:	e01d      	b.n	8005e1a <UART_SetConfig+0x352>
 8005dde:	bf00      	nop
 8005de0:	efff69f3 	.word	0xefff69f3
 8005de4:	40008000 	.word	0x40008000
 8005de8:	40013800 	.word	0x40013800
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40004400 	.word	0x40004400
 8005df4:	40004800 	.word	0x40004800
 8005df8:	40004c00 	.word	0x40004c00
 8005dfc:	40005000 	.word	0x40005000
 8005e00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005e04:	f7fd fd7a 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8005e08:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e0a:	e006      	b.n	8005e1a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e12:	e002      	b.n	8005e1a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	76fb      	strb	r3, [r7, #27]
        break;
 8005e18:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 81b9 	beq.w	8006194 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d305      	bcc.n	8005e3e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d902      	bls.n	8005e44 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	76fb      	strb	r3, [r7, #27]
 8005e42:	e1a7      	b.n	8006194 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	f200 8092 	bhi.w	8005f72 <UART_SetConfig+0x4aa>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0x38c>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005f73 	.word	0x08005f73
 8005e5c:	08005ec7 	.word	0x08005ec7
 8005e60:	08005f73 	.word	0x08005f73
 8005e64:	08005efb 	.word	0x08005efb
 8005e68:	08005f73 	.word	0x08005f73
 8005e6c:	08005f73 	.word	0x08005f73
 8005e70:	08005f73 	.word	0x08005f73
 8005e74:	08005f49 	.word	0x08005f49
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fd fdd6 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4619      	mov	r1, r3
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	0214      	lsls	r4, r2, #8
 8005e90:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005e94:	020b      	lsls	r3, r1, #8
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6852      	ldr	r2, [r2, #4]
 8005e9a:	0852      	lsrs	r2, r2, #1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	eb13 0b01 	adds.w	fp, r3, r1
 8005ea6:	eb44 0c02 	adc.w	ip, r4, r2
 8005eaa:	4658      	mov	r0, fp
 8005eac:	4661      	mov	r1, ip
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f04f 0400 	mov.w	r4, #0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4623      	mov	r3, r4
 8005eba:	f7fa f9e1 	bl	8000280 <__aeabi_uldivmod>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ec4:	e058      	b.n	8005f78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	49ae      	ldr	r1, [pc, #696]	; (800618c <UART_SetConfig+0x6c4>)
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	eb13 0b01 	adds.w	fp, r3, r1
 8005eda:	eb44 0c02 	adc.w	ip, r4, r2
 8005ede:	4658      	mov	r0, fp
 8005ee0:	4661      	mov	r1, ip
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	461a      	mov	r2, r3
 8005eec:	4623      	mov	r3, r4
 8005eee:	f7fa f9c7 	bl	8000280 <__aeabi_uldivmod>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ef8:	e03e      	b.n	8005f78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fd fcff 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8005efe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4619      	mov	r1, r3
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	f04f 0400 	mov.w	r4, #0
 8005f10:	0214      	lsls	r4, r2, #8
 8005f12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f16:	020b      	lsls	r3, r1, #8
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6852      	ldr	r2, [r2, #4]
 8005f1c:	0852      	lsrs	r2, r2, #1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	eb13 0b01 	adds.w	fp, r3, r1
 8005f28:	eb44 0c02 	adc.w	ip, r4, r2
 8005f2c:	4658      	mov	r0, fp
 8005f2e:	4661      	mov	r1, ip
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f04f 0400 	mov.w	r4, #0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	f7fa f9a0 	bl	8000280 <__aeabi_uldivmod>
 8005f40:	4603      	mov	r3, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005f46:	e017      	b.n	8005f78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	f04f 0400 	mov.w	r4, #0
 8005f52:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005f56:	f144 0100 	adc.w	r1, r4, #0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f04f 0400 	mov.w	r4, #0
 8005f62:	461a      	mov	r2, r3
 8005f64:	4623      	mov	r3, r4
 8005f66:	f7fa f98b 	bl	8000280 <__aeabi_uldivmod>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005f70:	e002      	b.n	8005f78 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	76fb      	strb	r3, [r7, #27]
            break;
 8005f76:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7e:	d308      	bcc.n	8005f92 <UART_SetConfig+0x4ca>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f86:	d204      	bcs.n	8005f92 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e100      	b.n	8006194 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	76fb      	strb	r3, [r7, #27]
 8005f96:	e0fd      	b.n	8006194 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	f040 8084 	bne.w	80060ac <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d85f      	bhi.n	800606c <UART_SetConfig+0x5a4>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x4ec>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005ff9 	.word	0x08005ff9
 8005fbc:	08006019 	.word	0x08006019
 8005fc0:	0800606d 	.word	0x0800606d
 8005fc4:	08006035 	.word	0x08006035
 8005fc8:	0800606d 	.word	0x0800606d
 8005fcc:	0800606d 	.word	0x0800606d
 8005fd0:	0800606d 	.word	0x0800606d
 8005fd4:	08006055 	.word	0x08006055
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd8:	f7fd fd26 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005fdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	005a      	lsls	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ff6:	e03c      	b.n	8006072 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fd fd2c 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	005a      	lsls	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006016:	e02c      	b.n	8006072 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006022:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	fbb3 f3f2 	udiv	r3, r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006032:	e01e      	b.n	8006072 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006034:	f7fd fc62 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8006038:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	005a      	lsls	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006052:	e00e      	b.n	8006072 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	b29b      	uxth	r3, r3
 8006068:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800606a:	e002      	b.n	8006072 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	76fb      	strb	r3, [r7, #27]
        break;
 8006070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b0f      	cmp	r3, #15
 8006076:	d916      	bls.n	80060a6 <UART_SetConfig+0x5de>
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607e:	d212      	bcs.n	80060a6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f023 030f 	bic.w	r3, r3, #15
 8006088:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	b29a      	uxth	r2, r3
 8006096:	89fb      	ldrh	r3, [r7, #14]
 8006098:	4313      	orrs	r3, r2
 800609a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	89fa      	ldrh	r2, [r7, #14]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	e076      	b.n	8006194 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	76fb      	strb	r3, [r7, #27]
 80060aa:	e073      	b.n	8006194 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80060ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d85c      	bhi.n	800616e <UART_SetConfig+0x6a6>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x5f4>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060ff 	.word	0x080060ff
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	0800616f 	.word	0x0800616f
 80060cc:	08006139 	.word	0x08006139
 80060d0:	0800616f 	.word	0x0800616f
 80060d4:	0800616f 	.word	0x0800616f
 80060d8:	0800616f 	.word	0x0800616f
 80060dc:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e0:	f7fd fca2 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80060e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	085a      	lsrs	r2, r3, #1
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	441a      	add	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80060fc:	e03a      	b.n	8006174 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fe:	f7fd fca9 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006102:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085a      	lsrs	r2, r3, #1
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800611a:	e02b      	b.n	8006174 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006126:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6852      	ldr	r2, [r2, #4]
 800612e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006132:	b29b      	uxth	r3, r3
 8006134:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006136:	e01d      	b.n	8006174 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006138:	f7fd fbe0 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 800613c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085a      	lsrs	r2, r3, #1
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	441a      	add	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	b29b      	uxth	r3, r3
 8006152:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006154:	e00e      	b.n	8006174 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
 800616a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800616c:	e002      	b.n	8006174 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	76fb      	strb	r3, [r7, #27]
        break;
 8006172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d90a      	bls.n	8006190 <UART_SetConfig+0x6c8>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d206      	bcs.n	8006190 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e003      	b.n	8006194 <UART_SetConfig+0x6cc>
 800618c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80061a0:	7efb      	ldrb	r3, [r7, #27]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3728      	adds	r7, #40	; 0x28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080061ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062aa:	d10a      	bne.n	80062c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062fe:	f7fa ffcd 	bl	800129c <HAL_GetTick>
 8006302:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b08      	cmp	r3, #8
 8006310:	d10e      	bne.n	8006330 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f82a 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e020      	b.n	8006372 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d10e      	bne.n	800635c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800633e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f814 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e00a      	b.n	8006372 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638a:	e05d      	b.n	8006448 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006392:	d059      	beq.n	8006448 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006394:	f7fa ff82 	bl	800129c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d302      	bcc.n	80063aa <UART_WaitOnFlagUntilTimeout+0x30>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11b      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e042      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02b      	beq.n	8006448 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d123      	bne.n	8006448 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006408:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006418:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e00f      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	429a      	cmp	r2, r3
 8006464:	d092      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006486:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff faf0 	bl	8005ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e8:	2b21      	cmp	r3, #33	; 0x21
 80064ea:	d12b      	bne.n	8006544 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d110      	bne.n	800651a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006506:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006516:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006518:	e014      	b.n	8006544 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	b292      	uxth	r2, r2
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655c:	2b21      	cmp	r3, #33	; 0x21
 800655e:	d12f      	bne.n	80065c0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d110      	bne.n	800658e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800658c:	e018      	b.n	80065c0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	881a      	ldrh	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a0:	b292      	uxth	r2, r2
 80065a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fa55 	bl	8005aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <__errno>:
 8006614:	4b01      	ldr	r3, [pc, #4]	; (800661c <__errno+0x8>)
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	2000000c 	.word	0x2000000c

08006620 <__libc_init_array>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4e0d      	ldr	r6, [pc, #52]	; (8006658 <__libc_init_array+0x38>)
 8006624:	4c0d      	ldr	r4, [pc, #52]	; (800665c <__libc_init_array+0x3c>)
 8006626:	1ba4      	subs	r4, r4, r6
 8006628:	10a4      	asrs	r4, r4, #2
 800662a:	2500      	movs	r5, #0
 800662c:	42a5      	cmp	r5, r4
 800662e:	d109      	bne.n	8006644 <__libc_init_array+0x24>
 8006630:	4e0b      	ldr	r6, [pc, #44]	; (8006660 <__libc_init_array+0x40>)
 8006632:	4c0c      	ldr	r4, [pc, #48]	; (8006664 <__libc_init_array+0x44>)
 8006634:	f000 fc26 	bl	8006e84 <_init>
 8006638:	1ba4      	subs	r4, r4, r6
 800663a:	10a4      	asrs	r4, r4, #2
 800663c:	2500      	movs	r5, #0
 800663e:	42a5      	cmp	r5, r4
 8006640:	d105      	bne.n	800664e <__libc_init_array+0x2e>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006648:	4798      	blx	r3
 800664a:	3501      	adds	r5, #1
 800664c:	e7ee      	b.n	800662c <__libc_init_array+0xc>
 800664e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006652:	4798      	blx	r3
 8006654:	3501      	adds	r5, #1
 8006656:	e7f2      	b.n	800663e <__libc_init_array+0x1e>
 8006658:	08006f28 	.word	0x08006f28
 800665c:	08006f28 	.word	0x08006f28
 8006660:	08006f28 	.word	0x08006f28
 8006664:	08006f2c 	.word	0x08006f2c

08006668 <memset>:
 8006668:	4402      	add	r2, r0
 800666a:	4603      	mov	r3, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	f803 1b01 	strb.w	r1, [r3], #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <siprintf>:
 8006678:	b40e      	push	{r1, r2, r3}
 800667a:	b500      	push	{lr}
 800667c:	b09c      	sub	sp, #112	; 0x70
 800667e:	ab1d      	add	r3, sp, #116	; 0x74
 8006680:	9002      	str	r0, [sp, #8]
 8006682:	9006      	str	r0, [sp, #24]
 8006684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006688:	4809      	ldr	r0, [pc, #36]	; (80066b0 <siprintf+0x38>)
 800668a:	9107      	str	r1, [sp, #28]
 800668c:	9104      	str	r1, [sp, #16]
 800668e:	4909      	ldr	r1, [pc, #36]	; (80066b4 <siprintf+0x3c>)
 8006690:	f853 2b04 	ldr.w	r2, [r3], #4
 8006694:	9105      	str	r1, [sp, #20]
 8006696:	6800      	ldr	r0, [r0, #0]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	a902      	add	r1, sp, #8
 800669c:	f000 f866 	bl	800676c <_svfiprintf_r>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	b01c      	add	sp, #112	; 0x70
 80066a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ac:	b003      	add	sp, #12
 80066ae:	4770      	bx	lr
 80066b0:	2000000c 	.word	0x2000000c
 80066b4:	ffff0208 	.word	0xffff0208

080066b8 <__ssputs_r>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	688e      	ldr	r6, [r1, #8]
 80066be:	429e      	cmp	r6, r3
 80066c0:	4682      	mov	sl, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4690      	mov	r8, r2
 80066c6:	4699      	mov	r9, r3
 80066c8:	d837      	bhi.n	800673a <__ssputs_r+0x82>
 80066ca:	898a      	ldrh	r2, [r1, #12]
 80066cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066d0:	d031      	beq.n	8006736 <__ssputs_r+0x7e>
 80066d2:	6825      	ldr	r5, [r4, #0]
 80066d4:	6909      	ldr	r1, [r1, #16]
 80066d6:	1a6f      	subs	r7, r5, r1
 80066d8:	6965      	ldr	r5, [r4, #20]
 80066da:	2302      	movs	r3, #2
 80066dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80066e4:	f109 0301 	add.w	r3, r9, #1
 80066e8:	443b      	add	r3, r7
 80066ea:	429d      	cmp	r5, r3
 80066ec:	bf38      	it	cc
 80066ee:	461d      	movcc	r5, r3
 80066f0:	0553      	lsls	r3, r2, #21
 80066f2:	d530      	bpl.n	8006756 <__ssputs_r+0x9e>
 80066f4:	4629      	mov	r1, r5
 80066f6:	f000 fb2b 	bl	8006d50 <_malloc_r>
 80066fa:	4606      	mov	r6, r0
 80066fc:	b950      	cbnz	r0, 8006714 <__ssputs_r+0x5c>
 80066fe:	230c      	movs	r3, #12
 8006700:	f8ca 3000 	str.w	r3, [sl]
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006714:	463a      	mov	r2, r7
 8006716:	6921      	ldr	r1, [r4, #16]
 8006718:	f000 faa8 	bl	8006c6c <memcpy>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	6126      	str	r6, [r4, #16]
 800672a:	6165      	str	r5, [r4, #20]
 800672c:	443e      	add	r6, r7
 800672e:	1bed      	subs	r5, r5, r7
 8006730:	6026      	str	r6, [r4, #0]
 8006732:	60a5      	str	r5, [r4, #8]
 8006734:	464e      	mov	r6, r9
 8006736:	454e      	cmp	r6, r9
 8006738:	d900      	bls.n	800673c <__ssputs_r+0x84>
 800673a:	464e      	mov	r6, r9
 800673c:	4632      	mov	r2, r6
 800673e:	4641      	mov	r1, r8
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	f000 fa9e 	bl	8006c82 <memmove>
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	1b9b      	subs	r3, r3, r6
 800674a:	60a3      	str	r3, [r4, #8]
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	441e      	add	r6, r3
 8006750:	6026      	str	r6, [r4, #0]
 8006752:	2000      	movs	r0, #0
 8006754:	e7dc      	b.n	8006710 <__ssputs_r+0x58>
 8006756:	462a      	mov	r2, r5
 8006758:	f000 fb54 	bl	8006e04 <_realloc_r>
 800675c:	4606      	mov	r6, r0
 800675e:	2800      	cmp	r0, #0
 8006760:	d1e2      	bne.n	8006728 <__ssputs_r+0x70>
 8006762:	6921      	ldr	r1, [r4, #16]
 8006764:	4650      	mov	r0, sl
 8006766:	f000 faa5 	bl	8006cb4 <_free_r>
 800676a:	e7c8      	b.n	80066fe <__ssputs_r+0x46>

0800676c <_svfiprintf_r>:
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	461d      	mov	r5, r3
 8006772:	898b      	ldrh	r3, [r1, #12]
 8006774:	061f      	lsls	r7, r3, #24
 8006776:	b09d      	sub	sp, #116	; 0x74
 8006778:	4680      	mov	r8, r0
 800677a:	460c      	mov	r4, r1
 800677c:	4616      	mov	r6, r2
 800677e:	d50f      	bpl.n	80067a0 <_svfiprintf_r+0x34>
 8006780:	690b      	ldr	r3, [r1, #16]
 8006782:	b96b      	cbnz	r3, 80067a0 <_svfiprintf_r+0x34>
 8006784:	2140      	movs	r1, #64	; 0x40
 8006786:	f000 fae3 	bl	8006d50 <_malloc_r>
 800678a:	6020      	str	r0, [r4, #0]
 800678c:	6120      	str	r0, [r4, #16]
 800678e:	b928      	cbnz	r0, 800679c <_svfiprintf_r+0x30>
 8006790:	230c      	movs	r3, #12
 8006792:	f8c8 3000 	str.w	r3, [r8]
 8006796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800679a:	e0c8      	b.n	800692e <_svfiprintf_r+0x1c2>
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	6163      	str	r3, [r4, #20]
 80067a0:	2300      	movs	r3, #0
 80067a2:	9309      	str	r3, [sp, #36]	; 0x24
 80067a4:	2320      	movs	r3, #32
 80067a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067aa:	2330      	movs	r3, #48	; 0x30
 80067ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067b0:	9503      	str	r5, [sp, #12]
 80067b2:	f04f 0b01 	mov.w	fp, #1
 80067b6:	4637      	mov	r7, r6
 80067b8:	463d      	mov	r5, r7
 80067ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067be:	b10b      	cbz	r3, 80067c4 <_svfiprintf_r+0x58>
 80067c0:	2b25      	cmp	r3, #37	; 0x25
 80067c2:	d13e      	bne.n	8006842 <_svfiprintf_r+0xd6>
 80067c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80067c8:	d00b      	beq.n	80067e2 <_svfiprintf_r+0x76>
 80067ca:	4653      	mov	r3, sl
 80067cc:	4632      	mov	r2, r6
 80067ce:	4621      	mov	r1, r4
 80067d0:	4640      	mov	r0, r8
 80067d2:	f7ff ff71 	bl	80066b8 <__ssputs_r>
 80067d6:	3001      	adds	r0, #1
 80067d8:	f000 80a4 	beq.w	8006924 <_svfiprintf_r+0x1b8>
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	4453      	add	r3, sl
 80067e0:	9309      	str	r3, [sp, #36]	; 0x24
 80067e2:	783b      	ldrb	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 809d 	beq.w	8006924 <_svfiprintf_r+0x1b8>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067fc:	931a      	str	r3, [sp, #104]	; 0x68
 80067fe:	462f      	mov	r7, r5
 8006800:	2205      	movs	r2, #5
 8006802:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006806:	4850      	ldr	r0, [pc, #320]	; (8006948 <_svfiprintf_r+0x1dc>)
 8006808:	f7f9 fcea 	bl	80001e0 <memchr>
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	b9d0      	cbnz	r0, 8006846 <_svfiprintf_r+0xda>
 8006810:	06d9      	lsls	r1, r3, #27
 8006812:	bf44      	itt	mi
 8006814:	2220      	movmi	r2, #32
 8006816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800681a:	071a      	lsls	r2, r3, #28
 800681c:	bf44      	itt	mi
 800681e:	222b      	movmi	r2, #43	; 0x2b
 8006820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006824:	782a      	ldrb	r2, [r5, #0]
 8006826:	2a2a      	cmp	r2, #42	; 0x2a
 8006828:	d015      	beq.n	8006856 <_svfiprintf_r+0xea>
 800682a:	9a07      	ldr	r2, [sp, #28]
 800682c:	462f      	mov	r7, r5
 800682e:	2000      	movs	r0, #0
 8006830:	250a      	movs	r5, #10
 8006832:	4639      	mov	r1, r7
 8006834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006838:	3b30      	subs	r3, #48	; 0x30
 800683a:	2b09      	cmp	r3, #9
 800683c:	d94d      	bls.n	80068da <_svfiprintf_r+0x16e>
 800683e:	b1b8      	cbz	r0, 8006870 <_svfiprintf_r+0x104>
 8006840:	e00f      	b.n	8006862 <_svfiprintf_r+0xf6>
 8006842:	462f      	mov	r7, r5
 8006844:	e7b8      	b.n	80067b8 <_svfiprintf_r+0x4c>
 8006846:	4a40      	ldr	r2, [pc, #256]	; (8006948 <_svfiprintf_r+0x1dc>)
 8006848:	1a80      	subs	r0, r0, r2
 800684a:	fa0b f000 	lsl.w	r0, fp, r0
 800684e:	4318      	orrs	r0, r3
 8006850:	9004      	str	r0, [sp, #16]
 8006852:	463d      	mov	r5, r7
 8006854:	e7d3      	b.n	80067fe <_svfiprintf_r+0x92>
 8006856:	9a03      	ldr	r2, [sp, #12]
 8006858:	1d11      	adds	r1, r2, #4
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	9103      	str	r1, [sp, #12]
 800685e:	2a00      	cmp	r2, #0
 8006860:	db01      	blt.n	8006866 <_svfiprintf_r+0xfa>
 8006862:	9207      	str	r2, [sp, #28]
 8006864:	e004      	b.n	8006870 <_svfiprintf_r+0x104>
 8006866:	4252      	negs	r2, r2
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	9207      	str	r2, [sp, #28]
 800686e:	9304      	str	r3, [sp, #16]
 8006870:	783b      	ldrb	r3, [r7, #0]
 8006872:	2b2e      	cmp	r3, #46	; 0x2e
 8006874:	d10c      	bne.n	8006890 <_svfiprintf_r+0x124>
 8006876:	787b      	ldrb	r3, [r7, #1]
 8006878:	2b2a      	cmp	r3, #42	; 0x2a
 800687a:	d133      	bne.n	80068e4 <_svfiprintf_r+0x178>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	9203      	str	r2, [sp, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	bfb8      	it	lt
 8006888:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800688c:	3702      	adds	r7, #2
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	4d2e      	ldr	r5, [pc, #184]	; (800694c <_svfiprintf_r+0x1e0>)
 8006892:	7839      	ldrb	r1, [r7, #0]
 8006894:	2203      	movs	r2, #3
 8006896:	4628      	mov	r0, r5
 8006898:	f7f9 fca2 	bl	80001e0 <memchr>
 800689c:	b138      	cbz	r0, 80068ae <_svfiprintf_r+0x142>
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	1b40      	subs	r0, r0, r5
 80068a2:	fa03 f000 	lsl.w	r0, r3, r0
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	4303      	orrs	r3, r0
 80068aa:	3701      	adds	r7, #1
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	7839      	ldrb	r1, [r7, #0]
 80068b0:	4827      	ldr	r0, [pc, #156]	; (8006950 <_svfiprintf_r+0x1e4>)
 80068b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068b6:	2206      	movs	r2, #6
 80068b8:	1c7e      	adds	r6, r7, #1
 80068ba:	f7f9 fc91 	bl	80001e0 <memchr>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d038      	beq.n	8006934 <_svfiprintf_r+0x1c8>
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <_svfiprintf_r+0x1e8>)
 80068c4:	bb13      	cbnz	r3, 800690c <_svfiprintf_r+0x1a0>
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	3307      	adds	r3, #7
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	3308      	adds	r3, #8
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	444b      	add	r3, r9
 80068d6:	9309      	str	r3, [sp, #36]	; 0x24
 80068d8:	e76d      	b.n	80067b6 <_svfiprintf_r+0x4a>
 80068da:	fb05 3202 	mla	r2, r5, r2, r3
 80068de:	2001      	movs	r0, #1
 80068e0:	460f      	mov	r7, r1
 80068e2:	e7a6      	b.n	8006832 <_svfiprintf_r+0xc6>
 80068e4:	2300      	movs	r3, #0
 80068e6:	3701      	adds	r7, #1
 80068e8:	9305      	str	r3, [sp, #20]
 80068ea:	4619      	mov	r1, r3
 80068ec:	250a      	movs	r5, #10
 80068ee:	4638      	mov	r0, r7
 80068f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f4:	3a30      	subs	r2, #48	; 0x30
 80068f6:	2a09      	cmp	r2, #9
 80068f8:	d903      	bls.n	8006902 <_svfiprintf_r+0x196>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0c8      	beq.n	8006890 <_svfiprintf_r+0x124>
 80068fe:	9105      	str	r1, [sp, #20]
 8006900:	e7c6      	b.n	8006890 <_svfiprintf_r+0x124>
 8006902:	fb05 2101 	mla	r1, r5, r1, r2
 8006906:	2301      	movs	r3, #1
 8006908:	4607      	mov	r7, r0
 800690a:	e7f0      	b.n	80068ee <_svfiprintf_r+0x182>
 800690c:	ab03      	add	r3, sp, #12
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4622      	mov	r2, r4
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <_svfiprintf_r+0x1ec>)
 8006914:	a904      	add	r1, sp, #16
 8006916:	4640      	mov	r0, r8
 8006918:	f3af 8000 	nop.w
 800691c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006920:	4681      	mov	r9, r0
 8006922:	d1d6      	bne.n	80068d2 <_svfiprintf_r+0x166>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	065b      	lsls	r3, r3, #25
 8006928:	f53f af35 	bmi.w	8006796 <_svfiprintf_r+0x2a>
 800692c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800692e:	b01d      	add	sp, #116	; 0x74
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	ab03      	add	r3, sp, #12
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4622      	mov	r2, r4
 800693a:	4b07      	ldr	r3, [pc, #28]	; (8006958 <_svfiprintf_r+0x1ec>)
 800693c:	a904      	add	r1, sp, #16
 800693e:	4640      	mov	r0, r8
 8006940:	f000 f882 	bl	8006a48 <_printf_i>
 8006944:	e7ea      	b.n	800691c <_svfiprintf_r+0x1b0>
 8006946:	bf00      	nop
 8006948:	08006eec 	.word	0x08006eec
 800694c:	08006ef2 	.word	0x08006ef2
 8006950:	08006ef6 	.word	0x08006ef6
 8006954:	00000000 	.word	0x00000000
 8006958:	080066b9 	.word	0x080066b9

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4691      	mov	r9, r2
 8006962:	461f      	mov	r7, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800696c:	4293      	cmp	r3, r2
 800696e:	bfb8      	it	lt
 8006970:	4613      	movlt	r3, r2
 8006972:	f8c9 3000 	str.w	r3, [r9]
 8006976:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800697a:	4606      	mov	r6, r0
 800697c:	460c      	mov	r4, r1
 800697e:	b112      	cbz	r2, 8006986 <_printf_common+0x2a>
 8006980:	3301      	adds	r3, #1
 8006982:	f8c9 3000 	str.w	r3, [r9]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	0699      	lsls	r1, r3, #26
 800698a:	bf42      	ittt	mi
 800698c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006990:	3302      	addmi	r3, #2
 8006992:	f8c9 3000 	strmi.w	r3, [r9]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	f015 0506 	ands.w	r5, r5, #6
 800699c:	d107      	bne.n	80069ae <_printf_common+0x52>
 800699e:	f104 0a19 	add.w	sl, r4, #25
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	f8d9 2000 	ldr.w	r2, [r9]
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	42ab      	cmp	r3, r5
 80069ac:	dc28      	bgt.n	8006a00 <_printf_common+0xa4>
 80069ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	3300      	adds	r3, #0
 80069b6:	bf18      	it	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	0692      	lsls	r2, r2, #26
 80069bc:	d42d      	bmi.n	8006a1a <_printf_common+0xbe>
 80069be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069c2:	4639      	mov	r1, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	47c0      	blx	r8
 80069c8:	3001      	adds	r0, #1
 80069ca:	d020      	beq.n	8006a0e <_printf_common+0xb2>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	68e5      	ldr	r5, [r4, #12]
 80069d0:	f8d9 2000 	ldr.w	r2, [r9]
 80069d4:	f003 0306 	and.w	r3, r3, #6
 80069d8:	2b04      	cmp	r3, #4
 80069da:	bf08      	it	eq
 80069dc:	1aad      	subeq	r5, r5, r2
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	6922      	ldr	r2, [r4, #16]
 80069e2:	bf0c      	ite	eq
 80069e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e8:	2500      	movne	r5, #0
 80069ea:	4293      	cmp	r3, r2
 80069ec:	bfc4      	itt	gt
 80069ee:	1a9b      	subgt	r3, r3, r2
 80069f0:	18ed      	addgt	r5, r5, r3
 80069f2:	f04f 0900 	mov.w	r9, #0
 80069f6:	341a      	adds	r4, #26
 80069f8:	454d      	cmp	r5, r9
 80069fa:	d11a      	bne.n	8006a32 <_printf_common+0xd6>
 80069fc:	2000      	movs	r0, #0
 80069fe:	e008      	b.n	8006a12 <_printf_common+0xb6>
 8006a00:	2301      	movs	r3, #1
 8006a02:	4652      	mov	r2, sl
 8006a04:	4639      	mov	r1, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	47c0      	blx	r8
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d103      	bne.n	8006a16 <_printf_common+0xba>
 8006a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	3501      	adds	r5, #1
 8006a18:	e7c3      	b.n	80069a2 <_printf_common+0x46>
 8006a1a:	18e1      	adds	r1, r4, r3
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	2030      	movs	r0, #48	; 0x30
 8006a20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a24:	4422      	add	r2, r4
 8006a26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a2e:	3302      	adds	r3, #2
 8006a30:	e7c5      	b.n	80069be <_printf_common+0x62>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4622      	mov	r2, r4
 8006a36:	4639      	mov	r1, r7
 8006a38:	4630      	mov	r0, r6
 8006a3a:	47c0      	blx	r8
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0e6      	beq.n	8006a0e <_printf_common+0xb2>
 8006a40:	f109 0901 	add.w	r9, r9, #1
 8006a44:	e7d8      	b.n	80069f8 <_printf_common+0x9c>
	...

08006a48 <_printf_i>:
 8006a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a50:	460c      	mov	r4, r1
 8006a52:	7e09      	ldrb	r1, [r1, #24]
 8006a54:	b085      	sub	sp, #20
 8006a56:	296e      	cmp	r1, #110	; 0x6e
 8006a58:	4617      	mov	r7, r2
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4698      	mov	r8, r3
 8006a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a60:	f000 80b3 	beq.w	8006bca <_printf_i+0x182>
 8006a64:	d822      	bhi.n	8006aac <_printf_i+0x64>
 8006a66:	2963      	cmp	r1, #99	; 0x63
 8006a68:	d036      	beq.n	8006ad8 <_printf_i+0x90>
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x3a>
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	f000 80b9 	beq.w	8006be4 <_printf_i+0x19c>
 8006a72:	2958      	cmp	r1, #88	; 0x58
 8006a74:	f000 8083 	beq.w	8006b7e <_printf_i+0x136>
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a80:	e032      	b.n	8006ae8 <_printf_i+0xa0>
 8006a82:	2964      	cmp	r1, #100	; 0x64
 8006a84:	d001      	beq.n	8006a8a <_printf_i+0x42>
 8006a86:	2969      	cmp	r1, #105	; 0x69
 8006a88:	d1f6      	bne.n	8006a78 <_printf_i+0x30>
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	6813      	ldr	r3, [r2, #0]
 8006a8e:	0605      	lsls	r5, r0, #24
 8006a90:	f103 0104 	add.w	r1, r3, #4
 8006a94:	d52a      	bpl.n	8006aec <_printf_i+0xa4>
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da03      	bge.n	8006aa6 <_printf_i+0x5e>
 8006a9e:	222d      	movs	r2, #45	; 0x2d
 8006aa0:	425b      	negs	r3, r3
 8006aa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006aa6:	486f      	ldr	r0, [pc, #444]	; (8006c64 <_printf_i+0x21c>)
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	e039      	b.n	8006b20 <_printf_i+0xd8>
 8006aac:	2973      	cmp	r1, #115	; 0x73
 8006aae:	f000 809d 	beq.w	8006bec <_printf_i+0x1a4>
 8006ab2:	d808      	bhi.n	8006ac6 <_printf_i+0x7e>
 8006ab4:	296f      	cmp	r1, #111	; 0x6f
 8006ab6:	d020      	beq.n	8006afa <_printf_i+0xb2>
 8006ab8:	2970      	cmp	r1, #112	; 0x70
 8006aba:	d1dd      	bne.n	8006a78 <_printf_i+0x30>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	f043 0320 	orr.w	r3, r3, #32
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	e003      	b.n	8006ace <_printf_i+0x86>
 8006ac6:	2975      	cmp	r1, #117	; 0x75
 8006ac8:	d017      	beq.n	8006afa <_printf_i+0xb2>
 8006aca:	2978      	cmp	r1, #120	; 0x78
 8006acc:	d1d4      	bne.n	8006a78 <_printf_i+0x30>
 8006ace:	2378      	movs	r3, #120	; 0x78
 8006ad0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ad4:	4864      	ldr	r0, [pc, #400]	; (8006c68 <_printf_i+0x220>)
 8006ad6:	e055      	b.n	8006b84 <_printf_i+0x13c>
 8006ad8:	6813      	ldr	r3, [r2, #0]
 8006ada:	1d19      	adds	r1, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6011      	str	r1, [r2, #0]
 8006ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e08c      	b.n	8006c06 <_printf_i+0x1be>
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6011      	str	r1, [r2, #0]
 8006af0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006af4:	bf18      	it	ne
 8006af6:	b21b      	sxthne	r3, r3
 8006af8:	e7cf      	b.n	8006a9a <_printf_i+0x52>
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	1d18      	adds	r0, r3, #4
 8006b00:	6010      	str	r0, [r2, #0]
 8006b02:	0628      	lsls	r0, r5, #24
 8006b04:	d501      	bpl.n	8006b0a <_printf_i+0xc2>
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	e002      	b.n	8006b10 <_printf_i+0xc8>
 8006b0a:	0668      	lsls	r0, r5, #25
 8006b0c:	d5fb      	bpl.n	8006b06 <_printf_i+0xbe>
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	4854      	ldr	r0, [pc, #336]	; (8006c64 <_printf_i+0x21c>)
 8006b12:	296f      	cmp	r1, #111	; 0x6f
 8006b14:	bf14      	ite	ne
 8006b16:	220a      	movne	r2, #10
 8006b18:	2208      	moveq	r2, #8
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b20:	6865      	ldr	r5, [r4, #4]
 8006b22:	60a5      	str	r5, [r4, #8]
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	f2c0 8095 	blt.w	8006c54 <_printf_i+0x20c>
 8006b2a:	6821      	ldr	r1, [r4, #0]
 8006b2c:	f021 0104 	bic.w	r1, r1, #4
 8006b30:	6021      	str	r1, [r4, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d13d      	bne.n	8006bb2 <_printf_i+0x16a>
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	f040 808e 	bne.w	8006c58 <_printf_i+0x210>
 8006b3c:	4665      	mov	r5, ip
 8006b3e:	2a08      	cmp	r2, #8
 8006b40:	d10b      	bne.n	8006b5a <_printf_i+0x112>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	07db      	lsls	r3, r3, #31
 8006b46:	d508      	bpl.n	8006b5a <_printf_i+0x112>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	bfde      	ittt	le
 8006b50:	2330      	movle	r3, #48	; 0x30
 8006b52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b5a:	ebac 0305 	sub.w	r3, ip, r5
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	f8cd 8000 	str.w	r8, [sp]
 8006b64:	463b      	mov	r3, r7
 8006b66:	aa03      	add	r2, sp, #12
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff fef6 	bl	800695c <_printf_common>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d14d      	bne.n	8006c10 <_printf_i+0x1c8>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b78:	b005      	add	sp, #20
 8006b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	4839      	ldr	r0, [pc, #228]	; (8006c64 <_printf_i+0x21c>)
 8006b80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b84:	6813      	ldr	r3, [r2, #0]
 8006b86:	6821      	ldr	r1, [r4, #0]
 8006b88:	1d1d      	adds	r5, r3, #4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6015      	str	r5, [r2, #0]
 8006b8e:	060a      	lsls	r2, r1, #24
 8006b90:	d50b      	bpl.n	8006baa <_printf_i+0x162>
 8006b92:	07ca      	lsls	r2, r1, #31
 8006b94:	bf44      	itt	mi
 8006b96:	f041 0120 	orrmi.w	r1, r1, #32
 8006b9a:	6021      	strmi	r1, [r4, #0]
 8006b9c:	b91b      	cbnz	r3, 8006ba6 <_printf_i+0x15e>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	f022 0220 	bic.w	r2, r2, #32
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	e7b7      	b.n	8006b1a <_printf_i+0xd2>
 8006baa:	064d      	lsls	r5, r1, #25
 8006bac:	bf48      	it	mi
 8006bae:	b29b      	uxthmi	r3, r3
 8006bb0:	e7ef      	b.n	8006b92 <_printf_i+0x14a>
 8006bb2:	4665      	mov	r5, ip
 8006bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bb8:	fb02 3311 	mls	r3, r2, r1, r3
 8006bbc:	5cc3      	ldrb	r3, [r0, r3]
 8006bbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	d1f5      	bne.n	8006bb4 <_printf_i+0x16c>
 8006bc8:	e7b9      	b.n	8006b3e <_printf_i+0xf6>
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	6825      	ldr	r5, [r4, #0]
 8006bce:	6961      	ldr	r1, [r4, #20]
 8006bd0:	1d18      	adds	r0, r3, #4
 8006bd2:	6010      	str	r0, [r2, #0]
 8006bd4:	0628      	lsls	r0, r5, #24
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	d501      	bpl.n	8006bde <_printf_i+0x196>
 8006bda:	6019      	str	r1, [r3, #0]
 8006bdc:	e002      	b.n	8006be4 <_printf_i+0x19c>
 8006bde:	066a      	lsls	r2, r5, #25
 8006be0:	d5fb      	bpl.n	8006bda <_printf_i+0x192>
 8006be2:	8019      	strh	r1, [r3, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	4665      	mov	r5, ip
 8006bea:	e7b9      	b.n	8006b60 <_printf_i+0x118>
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	1d19      	adds	r1, r3, #4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	681d      	ldr	r5, [r3, #0]
 8006bf4:	6862      	ldr	r2, [r4, #4]
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f7f9 faf1 	bl	80001e0 <memchr>
 8006bfe:	b108      	cbz	r0, 8006c04 <_printf_i+0x1bc>
 8006c00:	1b40      	subs	r0, r0, r5
 8006c02:	6060      	str	r0, [r4, #4]
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0e:	e7a7      	b.n	8006b60 <_printf_i+0x118>
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	462a      	mov	r2, r5
 8006c14:	4639      	mov	r1, r7
 8006c16:	4630      	mov	r0, r6
 8006c18:	47c0      	blx	r8
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d0aa      	beq.n	8006b74 <_printf_i+0x12c>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	079b      	lsls	r3, r3, #30
 8006c22:	d413      	bmi.n	8006c4c <_printf_i+0x204>
 8006c24:	68e0      	ldr	r0, [r4, #12]
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	bfb8      	it	lt
 8006c2c:	4618      	movlt	r0, r3
 8006c2e:	e7a3      	b.n	8006b78 <_printf_i+0x130>
 8006c30:	2301      	movs	r3, #1
 8006c32:	464a      	mov	r2, r9
 8006c34:	4639      	mov	r1, r7
 8006c36:	4630      	mov	r0, r6
 8006c38:	47c0      	blx	r8
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d09a      	beq.n	8006b74 <_printf_i+0x12c>
 8006c3e:	3501      	adds	r5, #1
 8006c40:	68e3      	ldr	r3, [r4, #12]
 8006c42:	9a03      	ldr	r2, [sp, #12]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	42ab      	cmp	r3, r5
 8006c48:	dcf2      	bgt.n	8006c30 <_printf_i+0x1e8>
 8006c4a:	e7eb      	b.n	8006c24 <_printf_i+0x1dc>
 8006c4c:	2500      	movs	r5, #0
 8006c4e:	f104 0919 	add.w	r9, r4, #25
 8006c52:	e7f5      	b.n	8006c40 <_printf_i+0x1f8>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1ac      	bne.n	8006bb2 <_printf_i+0x16a>
 8006c58:	7803      	ldrb	r3, [r0, #0]
 8006c5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c62:	e76c      	b.n	8006b3e <_printf_i+0xf6>
 8006c64:	08006efd 	.word	0x08006efd
 8006c68:	08006f0e 	.word	0x08006f0e

08006c6c <memcpy>:
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	1e43      	subs	r3, r0, #1
 8006c70:	440a      	add	r2, r1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	d100      	bne.n	8006c78 <memcpy+0xc>
 8006c76:	bd10      	pop	{r4, pc}
 8006c78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c80:	e7f7      	b.n	8006c72 <memcpy+0x6>

08006c82 <memmove>:
 8006c82:	4288      	cmp	r0, r1
 8006c84:	b510      	push	{r4, lr}
 8006c86:	eb01 0302 	add.w	r3, r1, r2
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x1a>
 8006c8c:	1e42      	subs	r2, r0, #1
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	d00a      	beq.n	8006ca8 <memmove+0x26>
 8006c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0xc>
 8006c9c:	4283      	cmp	r3, r0
 8006c9e:	d9f5      	bls.n	8006c8c <memmove+0xa>
 8006ca0:	1881      	adds	r1, r0, r2
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	42d3      	cmn	r3, r2
 8006ca6:	d100      	bne.n	8006caa <memmove+0x28>
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cb2:	e7f7      	b.n	8006ca4 <memmove+0x22>

08006cb4 <_free_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d045      	beq.n	8006d48 <_free_r+0x94>
 8006cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc0:	1f0c      	subs	r4, r1, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfb8      	it	lt
 8006cc6:	18e4      	addlt	r4, r4, r3
 8006cc8:	f000 f8d2 	bl	8006e70 <__malloc_lock>
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <_free_r+0x98>)
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	b933      	cbnz	r3, 8006ce2 <_free_r+0x2e>
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	6014      	str	r4, [r2, #0]
 8006cd8:	4628      	mov	r0, r5
 8006cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cde:	f000 b8c8 	b.w	8006e72 <__malloc_unlock>
 8006ce2:	42a3      	cmp	r3, r4
 8006ce4:	d90c      	bls.n	8006d00 <_free_r+0x4c>
 8006ce6:	6821      	ldr	r1, [r4, #0]
 8006ce8:	1862      	adds	r2, r4, r1
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bf04      	itt	eq
 8006cee:	681a      	ldreq	r2, [r3, #0]
 8006cf0:	685b      	ldreq	r3, [r3, #4]
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	bf04      	itt	eq
 8006cf6:	1852      	addeq	r2, r2, r1
 8006cf8:	6022      	streq	r2, [r4, #0]
 8006cfa:	6004      	str	r4, [r0, #0]
 8006cfc:	e7ec      	b.n	8006cd8 <_free_r+0x24>
 8006cfe:	4613      	mov	r3, r2
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	b10a      	cbz	r2, 8006d08 <_free_r+0x54>
 8006d04:	42a2      	cmp	r2, r4
 8006d06:	d9fa      	bls.n	8006cfe <_free_r+0x4a>
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	1858      	adds	r0, r3, r1
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d10b      	bne.n	8006d28 <_free_r+0x74>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	4401      	add	r1, r0
 8006d14:	1858      	adds	r0, r3, r1
 8006d16:	4282      	cmp	r2, r0
 8006d18:	6019      	str	r1, [r3, #0]
 8006d1a:	d1dd      	bne.n	8006cd8 <_free_r+0x24>
 8006d1c:	6810      	ldr	r0, [r2, #0]
 8006d1e:	6852      	ldr	r2, [r2, #4]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	4401      	add	r1, r0
 8006d24:	6019      	str	r1, [r3, #0]
 8006d26:	e7d7      	b.n	8006cd8 <_free_r+0x24>
 8006d28:	d902      	bls.n	8006d30 <_free_r+0x7c>
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	602b      	str	r3, [r5, #0]
 8006d2e:	e7d3      	b.n	8006cd8 <_free_r+0x24>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	1821      	adds	r1, r4, r0
 8006d34:	428a      	cmp	r2, r1
 8006d36:	bf04      	itt	eq
 8006d38:	6811      	ldreq	r1, [r2, #0]
 8006d3a:	6852      	ldreq	r2, [r2, #4]
 8006d3c:	6062      	str	r2, [r4, #4]
 8006d3e:	bf04      	itt	eq
 8006d40:	1809      	addeq	r1, r1, r0
 8006d42:	6021      	streq	r1, [r4, #0]
 8006d44:	605c      	str	r4, [r3, #4]
 8006d46:	e7c7      	b.n	8006cd8 <_free_r+0x24>
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200000b0 	.word	0x200000b0

08006d50 <_malloc_r>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	1ccd      	adds	r5, r1, #3
 8006d54:	f025 0503 	bic.w	r5, r5, #3
 8006d58:	3508      	adds	r5, #8
 8006d5a:	2d0c      	cmp	r5, #12
 8006d5c:	bf38      	it	cc
 8006d5e:	250c      	movcc	r5, #12
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	4606      	mov	r6, r0
 8006d64:	db01      	blt.n	8006d6a <_malloc_r+0x1a>
 8006d66:	42a9      	cmp	r1, r5
 8006d68:	d903      	bls.n	8006d72 <_malloc_r+0x22>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	f000 f87d 	bl	8006e70 <__malloc_lock>
 8006d76:	4a21      	ldr	r2, [pc, #132]	; (8006dfc <_malloc_r+0xac>)
 8006d78:	6814      	ldr	r4, [r2, #0]
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	b991      	cbnz	r1, 8006da4 <_malloc_r+0x54>
 8006d7e:	4c20      	ldr	r4, [pc, #128]	; (8006e00 <_malloc_r+0xb0>)
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	b91b      	cbnz	r3, 8006d8c <_malloc_r+0x3c>
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f863 	bl	8006e50 <_sbrk_r>
 8006d8a:	6020      	str	r0, [r4, #0]
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 f85e 	bl	8006e50 <_sbrk_r>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d124      	bne.n	8006de2 <_malloc_r+0x92>
 8006d98:	230c      	movs	r3, #12
 8006d9a:	6033      	str	r3, [r6, #0]
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 f868 	bl	8006e72 <__malloc_unlock>
 8006da2:	e7e4      	b.n	8006d6e <_malloc_r+0x1e>
 8006da4:	680b      	ldr	r3, [r1, #0]
 8006da6:	1b5b      	subs	r3, r3, r5
 8006da8:	d418      	bmi.n	8006ddc <_malloc_r+0x8c>
 8006daa:	2b0b      	cmp	r3, #11
 8006dac:	d90f      	bls.n	8006dce <_malloc_r+0x7e>
 8006dae:	600b      	str	r3, [r1, #0]
 8006db0:	50cd      	str	r5, [r1, r3]
 8006db2:	18cc      	adds	r4, r1, r3
 8006db4:	4630      	mov	r0, r6
 8006db6:	f000 f85c 	bl	8006e72 <__malloc_unlock>
 8006dba:	f104 000b 	add.w	r0, r4, #11
 8006dbe:	1d23      	adds	r3, r4, #4
 8006dc0:	f020 0007 	bic.w	r0, r0, #7
 8006dc4:	1ac3      	subs	r3, r0, r3
 8006dc6:	d0d3      	beq.n	8006d70 <_malloc_r+0x20>
 8006dc8:	425a      	negs	r2, r3
 8006dca:	50e2      	str	r2, [r4, r3]
 8006dcc:	e7d0      	b.n	8006d70 <_malloc_r+0x20>
 8006dce:	428c      	cmp	r4, r1
 8006dd0:	684b      	ldr	r3, [r1, #4]
 8006dd2:	bf16      	itet	ne
 8006dd4:	6063      	strne	r3, [r4, #4]
 8006dd6:	6013      	streq	r3, [r2, #0]
 8006dd8:	460c      	movne	r4, r1
 8006dda:	e7eb      	b.n	8006db4 <_malloc_r+0x64>
 8006ddc:	460c      	mov	r4, r1
 8006dde:	6849      	ldr	r1, [r1, #4]
 8006de0:	e7cc      	b.n	8006d7c <_malloc_r+0x2c>
 8006de2:	1cc4      	adds	r4, r0, #3
 8006de4:	f024 0403 	bic.w	r4, r4, #3
 8006de8:	42a0      	cmp	r0, r4
 8006dea:	d005      	beq.n	8006df8 <_malloc_r+0xa8>
 8006dec:	1a21      	subs	r1, r4, r0
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f82e 	bl	8006e50 <_sbrk_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d0cf      	beq.n	8006d98 <_malloc_r+0x48>
 8006df8:	6025      	str	r5, [r4, #0]
 8006dfa:	e7db      	b.n	8006db4 <_malloc_r+0x64>
 8006dfc:	200000b0 	.word	0x200000b0
 8006e00:	200000b4 	.word	0x200000b4

08006e04 <_realloc_r>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	4607      	mov	r7, r0
 8006e08:	4614      	mov	r4, r2
 8006e0a:	460e      	mov	r6, r1
 8006e0c:	b921      	cbnz	r1, 8006e18 <_realloc_r+0x14>
 8006e0e:	4611      	mov	r1, r2
 8006e10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e14:	f7ff bf9c 	b.w	8006d50 <_malloc_r>
 8006e18:	b922      	cbnz	r2, 8006e24 <_realloc_r+0x20>
 8006e1a:	f7ff ff4b 	bl	8006cb4 <_free_r>
 8006e1e:	4625      	mov	r5, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e24:	f000 f826 	bl	8006e74 <_malloc_usable_size_r>
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d20f      	bcs.n	8006e4c <_realloc_r+0x48>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ff8e 	bl	8006d50 <_malloc_r>
 8006e34:	4605      	mov	r5, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d0f2      	beq.n	8006e20 <_realloc_r+0x1c>
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	f7ff ff15 	bl	8006c6c <memcpy>
 8006e42:	4631      	mov	r1, r6
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ff35 	bl	8006cb4 <_free_r>
 8006e4a:	e7e9      	b.n	8006e20 <_realloc_r+0x1c>
 8006e4c:	4635      	mov	r5, r6
 8006e4e:	e7e7      	b.n	8006e20 <_realloc_r+0x1c>

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4c06      	ldr	r4, [pc, #24]	; (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4605      	mov	r5, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	f7fa f92e 	bl	80010bc <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000224 	.word	0x20000224

08006e70 <__malloc_lock>:
 8006e70:	4770      	bx	lr

08006e72 <__malloc_unlock>:
 8006e72:	4770      	bx	lr

08006e74 <_malloc_usable_size_r>:
 8006e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e78:	1f18      	subs	r0, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bfbc      	itt	lt
 8006e7e:	580b      	ldrlt	r3, [r1, r0]
 8006e80:	18c0      	addlt	r0, r0, r3
 8006e82:	4770      	bx	lr

08006e84 <_init>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr

08006e90 <_fini>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	bf00      	nop
 8006e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e96:	bc08      	pop	{r3}
 8006e98:	469e      	mov	lr, r3
 8006e9a:	4770      	bx	lr
