
LED_PWM_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800660c  0800660c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006614  08006614  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800661c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08006628  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08006628  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001385b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000237e  00000000  00000000  00033897  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00035c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00036ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e36  00000000  00000000  000380a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d88b  00000000  00000000  00060ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105fb9  00000000  00000000  0006e761  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017471a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b8  00000000  00000000  00174798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065ac 	.word	0x080065ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080065ac 	.word	0x080065ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if (user_button.flag_maybe_pressed == OFF) {
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d104      	bne.n	80004ea <HAL_GPIO_EXTI_Callback+0x22>
		user_button.flag_maybe_pressed = ON;
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80004e2:	7893      	ldrb	r3, [r2, #2]
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	7093      	strb	r3, [r2, #2]
	}
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000028 	.word	0x20000028

080004fc <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	adc.value = HAL_ADC_GetValue(&hadc3);
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000506:	f001 fbb9 	bl	8001c7c <HAL_ADC_GetValue>
 800050a:	4602      	mov	r2, r0
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_ADC_ConvCpltCallback+0x30>)
 800050e:	601a      	str	r2, [r3, #0]
	fsm.new_event = ON;
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_ADC_ConvCpltCallback+0x34>)
 8000512:	7893      	ldrb	r3, [r2, #2]
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	7093      	strb	r3, [r2, #2]
	fsm.event = EVT_ADC_RECEIVED;
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_ADC_ConvCpltCallback+0x34>)
 800051c:	2206      	movs	r2, #6
 800051e:	701a      	strb	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000094 	.word	0x20000094
 800052c:	20000040 	.word	0x20000040
 8000530:	20000044 	.word	0x20000044

08000534 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a70      	ldr	r2, [pc, #448]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000542:	4293      	cmp	r3, r2
 8000544:	f040 80da 	bne.w	80006fc <HAL_TIM_PeriodElapsedCallback+0x1c8>

		/* after EXTI interrupt is triggered */
		if ( user_button.flag_maybe_pressed == ON ) {
 8000548:	4b6f      	ldr	r3, [pc, #444]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d106      	bne.n	8000564 <HAL_TIM_PeriodElapsedCallback+0x30>
			user_button.debounc_count++;
 8000556:	4b6c      	ldr	r3, [pc, #432]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	b29b      	uxth	r3, r3
 800055c:	3301      	adds	r3, #1
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b69      	ldr	r3, [pc, #420]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000562:	801a      	strh	r2, [r3, #0]
		}
		/* 10mSec elapsed */
		if ( user_button.debounc_count >= 10 ) {
 8000564:	4b68      	ldr	r3, [pc, #416]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	b29b      	uxth	r3, r3
 800056a:	2b09      	cmp	r3, #9
 800056c:	d914      	bls.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x64>

			/* button still pressed */
			if ( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ) {
 800056e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000572:	4866      	ldr	r0, [pc, #408]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000574:	f002 fca8 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10c      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x64>
				user_button.flag_maybe_pressed = OFF;
 800057e:	4a62      	ldr	r2, [pc, #392]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000580:	7893      	ldrb	r3, [r2, #2]
 8000582:	f36f 0341 	bfc	r3, #1, #1
 8000586:	7093      	strb	r3, [r2, #2]
				user_button.flag_pressed = ON;
 8000588:	4a5f      	ldr	r2, [pc, #380]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800058a:	7893      	ldrb	r3, [r2, #2]
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	7093      	strb	r3, [r2, #2]
				user_button.debounc_count = 0;
 8000592:	4b5d      	ldr	r3, [pc, #372]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
			}

		}
		/* Debouncing ignored */
		if ( user_button.flag_pressed == ON ) {
 8000598:	4b5b      	ldr	r3, [pc, #364]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d130      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
			user_button.flag_pressed =  OFF;
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005a8:	7893      	ldrb	r3, [r2, #2]
 80005aa:	f36f 0300 	bfc	r3, #0, #1
 80005ae:	7093      	strb	r3, [r2, #2]
			//user_led.status ^= ON; /* Start heartbeat */
			fsm.new_event = ON;
 80005b0:	4a57      	ldr	r2, [pc, #348]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005b2:	7893      	ldrb	r3, [r2, #2]
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	7093      	strb	r3, [r2, #2]
			if ( fsm.state == STATE_0 ) {
 80005ba:	4b55      	ldr	r3, [pc, #340]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <HAL_TIM_PeriodElapsedCallback+0x96>
				fsm.event = EVT_30;
 80005c2:	4b53      	ldr	r3, [pc, #332]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	e01e      	b.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if ( fsm.state == STATE_30 ) {
 80005ca:	4b51      	ldr	r3, [pc, #324]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d103      	bne.n	80005da <HAL_TIM_PeriodElapsedCallback+0xa6>
				fsm.event = EVT_70;
 80005d2:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005d4:	2203      	movs	r2, #3
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e016      	b.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if ( fsm.state == STATE_70 ) {
 80005da:	4b4d      	ldr	r3, [pc, #308]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d103      	bne.n	80005ea <HAL_TIM_PeriodElapsedCallback+0xb6>
				fsm.event = EVT_100;
 80005e2:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e00e      	b.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if ( fsm.state == STATE_100 ) {
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d103      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0xc6>
				fsm.event = EVT_ADC;
 80005f2:	4b47      	ldr	r3, [pc, #284]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005f4:	2205      	movs	r2, #5
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e006      	b.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if ( fsm.state == STATE_ADC ) {
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d102      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0xd4>
				fsm.event = EVT_0;
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
			}
		}

		/* When brightness is over 80% */
		if ( fsm.start_alarm_counter == ON ) {
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b01      	cmp	r3, #1
 8000614:	d107      	bne.n	8000626 <HAL_TIM_PeriodElapsedCallback+0xf2>
			fsm.alarm_counter++;
 8000616:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000618:	889b      	ldrh	r3, [r3, #4]
 800061a:	b29b      	uxth	r3, r3
 800061c:	3301      	adds	r3, #1
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000622:	809a      	strh	r2, [r3, #4]
 8000624:	e002      	b.n	800062c <HAL_TIM_PeriodElapsedCallback+0xf8>
		} else {
			fsm.alarm_counter = 0;
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000628:	2200      	movs	r2, #0
 800062a:	809a      	strh	r2, [r3, #4]
		}

		/* 5 secs elapsed */
		if ( fsm.alarm_counter >= TIME_FOR_ALARM ) {
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	b29b      	uxth	r3, r3
 8000632:	f241 3287 	movw	r2, #4999	; 0x1387
 8000636:	4293      	cmp	r3, r2
 8000638:	d90f      	bls.n	800065a <HAL_TIM_PeriodElapsedCallback+0x126>
			fsm.start_alarm_counter = OFF;
 800063a:	4a35      	ldr	r2, [pc, #212]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800063c:	7893      	ldrb	r3, [r2, #2]
 800063e:	f36f 0341 	bfc	r3, #1, #1
 8000642:	7093      	strb	r3, [r2, #2]
			fsm.alarm_counter = 0;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000646:	2200      	movs	r2, #0
 8000648:	809a      	strh	r2, [r3, #4]
			fsm.event = EVT_TIME_REACHED;
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800064c:	2207      	movs	r2, #7
 800064e:	701a      	strb	r2, [r3, #0]
			fsm.new_event = ON;
 8000650:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000652:	7893      	ldrb	r3, [r2, #2]
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	7093      	strb	r3, [r2, #2]
		}

		if ( fsm.start_toggle_counter == ON ) {
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b01      	cmp	r3, #1
 8000666:	d107      	bne.n	8000678 <HAL_TIM_PeriodElapsedCallback+0x144>
			fsm.toggle_counter++;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800066a:	88db      	ldrh	r3, [r3, #6]
 800066c:	b29b      	uxth	r3, r3
 800066e:	3301      	adds	r3, #1
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000674:	80da      	strh	r2, [r3, #6]
 8000676:	e002      	b.n	800067e <HAL_TIM_PeriodElapsedCallback+0x14a>
		} else {
			fsm.toggle_counter = 0;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800067a:	2200      	movs	r2, #0
 800067c:	80da      	strh	r2, [r3, #6]
		}

		if ( fsm.toggle_counter >= TIME_FOR_TOGGLE ) {
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000680:	88db      	ldrh	r3, [r3, #6]
 8000682:	b29b      	uxth	r3, r3
 8000684:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000688:	d30f      	bcc.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x176>
			fsm.start_toggle_counter = OFF;
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800068c:	7893      	ldrb	r3, [r2, #2]
 800068e:	f36f 0382 	bfc	r3, #2, #1
 8000692:	7093      	strb	r3, [r2, #2]
			fsm.toggle_counter = 0;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000696:	2200      	movs	r2, #0
 8000698:	80da      	strh	r2, [r3, #6]
			fsm.event = EVT_TIME_TOGGLE;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800069c:	2208      	movs	r2, #8
 800069e:	701a      	strb	r2, [r3, #0]
			fsm.new_event = ON;
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006a2:	7893      	ldrb	r3, [r2, #2]
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	7093      	strb	r3, [r2, #2]
		}

		if ( fsm.start_stop_alarm_counter == ON ) {
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d107      	bne.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x194>
			fsm.stop_counter++;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ba:	891b      	ldrh	r3, [r3, #8]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006c4:	811a      	strh	r2, [r3, #8]
 80006c6:	e002      	b.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x19a>
		} else {
			fsm.stop_counter = 0;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	811a      	strh	r2, [r3, #8]
		}

		if ( fsm.stop_counter >= TIME_FOR_ALARM ) {
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006d0:	891b      	ldrh	r3, [r3, #8]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f241 3287 	movw	r2, #4999	; 0x1387
 80006d8:	4293      	cmp	r3, r2
 80006da:	d90f      	bls.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x1c8>
			fsm.start_stop_alarm_counter = OFF;
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006de:	7893      	ldrb	r3, [r2, #2]
 80006e0:	f36f 03c3 	bfc	r3, #3, #1
 80006e4:	7093      	strb	r3, [r2, #2]
			fsm.stop_counter = 0;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	811a      	strh	r2, [r3, #8]
			fsm.event = EVT_TIME_STOP_ALARM;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ee:	2209      	movs	r2, #9
 80006f0:	701a      	strb	r2, [r3, #0]
			fsm.new_event = ON;
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006f4:	7893      	ldrb	r3, [r2, #2]
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	7093      	strb	r3, [r2, #2]
		}
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40000800 	.word	0x40000800
 8000708:	20000028 	.word	0x20000028
 800070c:	48000800 	.word	0x48000800
 8000710:	20000044 	.word	0x20000044

08000714 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000718:	f000 fdcf 	bl	80012ba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071c:	f000 f824 	bl	8000768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000720:	f000 f9d8 	bl	8000ad4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000724:	f000 f8fe 	bl	8000924 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000728:	f000 f956 	bl	80009d8 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800072c:	f000 f9a2 	bl	8000a74 <MX_USART2_UART_Init>
	MX_ADC3_Init();
 8000730:	f000 f892 	bl	8000858 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	uart2.tx_buff[BUFF_SIZE - 1] = '\0';
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <main+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	74da      	strb	r2, [r3, #19]

	HAL_TIM_Base_Start_IT(&htim4);
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <main+0x48>)
 800073c:	f003 ff50 	bl	80045e0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0x4c>)
 8000744:	f003 ffa2 	bl	800468c <HAL_TIM_PWM_Start_IT>

	fsm_init(&fsm);
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <main+0x50>)
 800074a:	f000 fa1b 	bl	8000b84 <fsm_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		fsm_run(&fsm);
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <main+0x50>)
 8000750:	f000 fa4e 	bl	8000bf0 <fsm_run>
 8000754:	e7fb      	b.n	800074e <main+0x3a>
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c
 800075c:	20000054 	.word	0x20000054
 8000760:	200000f8 	.word	0x200000f8
 8000764:	20000044 	.word	0x20000044

08000768 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0b8      	sub	sp, #224	; 0xe0
 800076c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000772:	2244      	movs	r2, #68	; 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f005 ff10 	bl	800659c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2288      	movs	r2, #136	; 0x88
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f005 ff02 	bl	800659c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000798:	2310      	movs	r3, #16
 800079a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fc4a 	bl	8003054 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x62>
	{
		Error_Handler();
 80007c6:	f000 fb7f 	bl	8000ec8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f816 	bl	8003820 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x96>
	{
		Error_Handler();
 80007fa:	f000 fb65 	bl	8000ec8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80007fe:	f244 0302 	movw	r3, #16386	; 0x4002
 8000802:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800080c:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800080e:	2301      	movs	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000816:	2308      	movs	r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800082a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f003 f9fa 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd6>
	{
		Error_Handler();
 800083a:	f000 fb45 	bl	8000ec8 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800083e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000842:	f002 fbb1 	bl	8002fa8 <HAL_PWREx_ControlVoltageScaling>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xe8>
	{
		Error_Handler();
 800084c:	f000 fb3c 	bl	8000ec8 <Error_Handler>
	}
}
 8000850:	bf00      	nop
 8000852:	37e0      	adds	r7, #224	; 0xe0
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <MX_ADC3_Init+0xc4>)
 8000872:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_ADC3_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_ADC3_Init+0xc0>)
 800088e:	2204      	movs	r2, #4
 8000890:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ADC3_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.NbrOfDiscConversion = 1;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_ADC3_Init+0xc0>)
 80008d6:	f000 ff4b 	bl	8001770 <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC3_Init+0x8c>
	{
		Error_Handler();
 80008e0:	f000 faf2 	bl	8000ec8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_ADC3_Init+0xc8>)
 80008e6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e8:	2306      	movs	r3, #6
 80008ea:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f0:	237f      	movs	r3, #127	; 0x7f
 80008f2:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f4:	2304      	movs	r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC3_Init+0xc0>)
 8000902:	f001 fbf7 	bl	80020f4 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC3_Init+0xb8>
	{
		Error_Handler();
 800090c:	f000 fadc 	bl	8000ec8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000094 	.word	0x20000094
 800091c:	50040200 	.word	0x50040200
 8000920:	04300002 	.word	0x04300002

08000924 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_TIM2_Init+0xb0>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 159;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_TIM2_Init+0xb0>)
 8000952:	229f      	movs	r2, #159	; 0x9f
 8000954:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_TIM2_Init+0xb0>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM2_Init+0xb0>)
 800095e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000962:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM2_Init+0xb0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM2_Init+0xb0>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000970:	4818      	ldr	r0, [pc, #96]	; (80009d4 <MX_TIM2_Init+0xb0>)
 8000972:	f003 fe5f 	bl	8004634 <HAL_TIM_PWM_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 800097c:	f000 faa4 	bl	8000ec8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_TIM2_Init+0xb0>)
 8000990:	f004 fe64 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 800099a:	f000 fa95 	bl	8000ec8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 99;
 80009a2:	2363      	movs	r3, #99	; 0x63
 80009a4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <MX_TIM2_Init+0xb0>)
 80009b6:	f004 f827 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80009c0:	f000 fa82 	bl	8000ec8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <MX_TIM2_Init+0xb0>)
 80009c6:	f000 fb3d 	bl	8001044 <HAL_TIM_MspPostInit>

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000f8 	.word	0x200000f8

080009d8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_TIM4_Init+0x94>)
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <MX_TIM4_Init+0x98>)
 80009fa:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_TIM4_Init+0x94>)
 80009fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a02:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 16;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a1e:	f003 fdb3 	bl	8004588 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8000a28:	f000 fa4e 	bl	8000ec8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a3a:	f004 f8fd 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8000a44:	f000 fa40 	bl	8000ec8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM4_Init+0x94>)
 8000a56:	f004 fe01 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8000a60:	f000 fa32 	bl	8000ec8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000054 	.word	0x20000054
 8000a70:	40000800 	.word	0x40000800

08000a74 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <MX_USART2_UART_Init+0x5c>)
 8000a7c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART2_UART_Init+0x58>)
 8000ab8:	f004 fe76 	bl	80057a8 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000ac2:	f000 fa01 	bl	8000ec8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000138 	.word	0x20000138
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 f9e9 	bl	8002ef8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_GPIO_Init+0xa8>)
 8000b2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_GPIO_Init+0xac>)
 8000b3c:	f002 f81c 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f002 f80d 	bl	8002b78 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f001 ff91 	bl	8002a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f001 ffaa 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	48000800 	.word	0x48000800

08000b84 <fsm_init>:

/* USER CODE BEGIN 4 */
void fsm_init (fsm_t *fsm) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

	fsm->state = STATE_0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	705a      	strb	r2, [r3, #1]
	fsm->event = EVT_NO_EVT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
	fsm->new_event = OFF;
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	7893      	ldrb	r3, [r2, #2]
 8000b9c:	f36f 0300 	bfc	r3, #0, #1
 8000ba0:	7093      	strb	r3, [r2, #2]
	fsm->start_alarm_counter = OFF;
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	7893      	ldrb	r3, [r2, #2]
 8000ba6:	f36f 0341 	bfc	r3, #1, #1
 8000baa:	7093      	strb	r3, [r2, #2]
	fsm->alarm_counter = 0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	809a      	strh	r2, [r3, #4]
	fsm->start_toggle_counter = OFF;
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	7893      	ldrb	r3, [r2, #2]
 8000bb6:	f36f 0382 	bfc	r3, #2, #1
 8000bba:	7093      	strb	r3, [r2, #2]
	fsm->toggle_counter = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	80da      	strh	r2, [r3, #6]
	fsm->start_stop_alarm_counter = OFF;
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7893      	ldrb	r3, [r2, #2]
 8000bc6:	f36f 03c3 	bfc	r3, #3, #1
 8000bca:	7093      	strb	r3, [r2, #2]
	fsm->stop_counter = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	811a      	strh	r2, [r3, #8]
	fsm->pwm_value = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <fsm_init+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	200000f8 	.word	0x200000f8

08000bf0 <fsm_run>:

void fsm_run (fsm_t *fsm) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if ( fsm->new_event == ON ) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	789b      	ldrb	r3, [r3, #2]
 8000bfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	f040 8149 	bne.w	8000e9a <fsm_run+0x2aa>
		fsm->new_event = OFF;
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	7893      	ldrb	r3, [r2, #2]
 8000c0c:	f36f 0300 	bfc	r3, #0, #1
 8000c10:	7093      	strb	r3, [r2, #2]

		switch (fsm->state) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	f200 8138 	bhi.w	8000e8c <fsm_run+0x29c>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <fsm_run+0x34>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c39 	.word	0x08000c39
 8000c28:	08000c57 	.word	0x08000c57
 8000c2c:	08000c75 	.word	0x08000c75
 8000c30:	08000c9d 	.word	0x08000c9d
 8000c34:	08000d69 	.word	0x08000d69

		case STATE_0:

			if ( fsm->event == EVT_30 ) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f040 812d 	bne.w	8000e9e <fsm_run+0x2ae>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);
 8000c44:	4b9c      	ldr	r3, [pc, #624]	; (8000eb8 <fsm_run+0x2c8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_30;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000c54:	e123      	b.n	8000e9e <fsm_run+0x2ae>

		case STATE_30:

			if ( fsm->event == EVT_70 ) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	f040 8120 	bne.w	8000ea2 <fsm_run+0x2b2>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1399);
 8000c62:	4b95      	ldr	r3, [pc, #596]	; (8000eb8 <fsm_run+0x2c8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f240 5277 	movw	r2, #1399	; 0x577
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_70;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000c72:	e116      	b.n	8000ea2 <fsm_run+0x2b2>

		case STATE_70:

			if ( fsm->event == EVT_100 ) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	f040 8113 	bne.w	8000ea6 <fsm_run+0x2b6>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1999);
 8000c80:	4b8d      	ldr	r3, [pc, #564]	; (8000eb8 <fsm_run+0x2c8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->start_alarm_counter = ON;
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	7893      	ldrb	r3, [r2, #2]
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	7093      	strb	r3, [r2, #2]
				fsm->state = STATE_100;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000c9a:	e104      	b.n	8000ea6 <fsm_run+0x2b6>

		case STATE_100:

			if ( fsm->event == EVT_ADC ) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d11b      	bne.n	8000cde <fsm_run+0xee>

				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f002 f923 	bl	8002ef8 <HAL_GPIO_WritePin>
				fsm->start_alarm_counter = OFF;
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	7893      	ldrb	r3, [r2, #2]
 8000cb6:	f36f 0341 	bfc	r3, #1, #1
 8000cba:	7093      	strb	r3, [r2, #2]
				fsm->start_toggle_counter = OFF;
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	7893      	ldrb	r3, [r2, #2]
 8000cc0:	f36f 0382 	bfc	r3, #2, #1
 8000cc4:	7093      	strb	r3, [r2, #2]
				fsm->start_stop_alarm_counter = OFF;
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	7893      	ldrb	r3, [r2, #2]
 8000cca:	f36f 03c3 	bfc	r3, #3, #1
 8000cce:	7093      	strb	r3, [r2, #2]
				fsm->state = STATE_ADC;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	705a      	strb	r2, [r3, #1]
				HAL_ADC_Start_IT(&hadc3);
 8000cd6:	4879      	ldr	r0, [pc, #484]	; (8000ebc <fsm_run+0x2cc>)
 8000cd8:	f000 fe9e 	bl	8001a18 <HAL_ADC_Start_IT>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
				fsm->start_toggle_counter = OFF;
				fsm->start_alarm_counter = ON;

			}
			break;
 8000cdc:	e0e5      	b.n	8000eaa <fsm_run+0x2ba>
			} else if ( fsm->event == EVT_TIME_REACHED ) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d113      	bne.n	8000d10 <fsm_run+0x120>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000ce8:	4b73      	ldr	r3, [pc, #460]	; (8000eb8 <fsm_run+0x2c8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000cf0:	2140      	movs	r1, #64	; 0x40
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f002 f917 	bl	8002f28 <HAL_GPIO_TogglePin>
				fsm->start_toggle_counter = ON;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	7893      	ldrb	r3, [r2, #2]
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	7093      	strb	r3, [r2, #2]
				fsm->start_stop_alarm_counter = ON;
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	7893      	ldrb	r3, [r2, #2]
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	7093      	strb	r3, [r2, #2]
			break;
 8000d0e:	e0cc      	b.n	8000eaa <fsm_run+0x2ba>
			} else if ( fsm->event == EVT_TIME_TOGGLE ) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d10a      	bne.n	8000d30 <fsm_run+0x140>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f002 f902 	bl	8002f28 <HAL_GPIO_TogglePin>
				fsm->start_toggle_counter = ON;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	7893      	ldrb	r3, [r2, #2]
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	7093      	strb	r3, [r2, #2]
			break;
 8000d2e:	e0bc      	b.n	8000eaa <fsm_run+0x2ba>
			} else if ( fsm->event == EVT_TIME_STOP_ALARM ) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b09      	cmp	r3, #9
 8000d38:	f040 80b7 	bne.w	8000eaa <fsm_run+0x2ba>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1999);
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <fsm_run+0x2c8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f002 f8d3 	bl	8002ef8 <HAL_GPIO_WritePin>
				fsm->start_toggle_counter = OFF;
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	7893      	ldrb	r3, [r2, #2]
 8000d56:	f36f 0382 	bfc	r3, #2, #1
 8000d5a:	7093      	strb	r3, [r2, #2]
				fsm->start_alarm_counter = ON;
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	7893      	ldrb	r3, [r2, #2]
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	7093      	strb	r3, [r2, #2]
			break;
 8000d66:	e0a0      	b.n	8000eaa <fsm_run+0x2ba>

		case STATE_ADC:

			if ( fsm->event == EVT_0 ) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d10d      	bne.n	8000d8e <fsm_run+0x19e>

				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f002 f8bd 	bl	8002ef8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <fsm_run+0x2c8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
				fsm->state = STATE_0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	705a      	strb	r2, [r3, #1]
				HAL_ADC_Start_IT(&hadc3);
				fsm->state = STATE_ADC;

			}

			break;
 8000d8c:	e08f      	b.n	8000eae <fsm_run+0x2be>
			else if ( fsm->event == EVT_ADC_RECEIVED ) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d133      	bne.n	8000e00 <fsm_run+0x210>
				fsm->pwm_value = (adc.value*1999)/(4050);
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <fsm_run+0x2d0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	085b      	lsrs	r3, r3, #1
 8000da6:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <fsm_run+0x2d4>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0a9a      	lsrs	r2, r3, #10
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fsm->pwm_value);
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <fsm_run+0x2c8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68d2      	ldr	r2, [r2, #12]
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
				if ( fsm->pwm_value >= 1580 ) { /* over 80% */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f240 622b 	movw	r2, #1579	; 0x62b
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d905      	bls.n	8000dd4 <fsm_run+0x1e4>
					fsm->start_alarm_counter = ON;
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	7893      	ldrb	r3, [r2, #2]
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	7093      	strb	r3, [r2, #2]
 8000dd2:	e00e      	b.n	8000df2 <fsm_run+0x202>
					fsm->start_alarm_counter = OFF;
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	7893      	ldrb	r3, [r2, #2]
 8000dd8:	f36f 0341 	bfc	r3, #1, #1
 8000ddc:	7093      	strb	r3, [r2, #2]
					fsm->start_toggle_counter = OFF;
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	7893      	ldrb	r3, [r2, #2]
 8000de2:	f36f 0382 	bfc	r3, #2, #1
 8000de6:	7093      	strb	r3, [r2, #2]
					fsm->start_stop_alarm_counter = OFF;
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	7893      	ldrb	r3, [r2, #2]
 8000dec:	f36f 03c3 	bfc	r3, #3, #1
 8000df0:	7093      	strb	r3, [r2, #2]
				HAL_ADC_Start_IT(&hadc3);
 8000df2:	4832      	ldr	r0, [pc, #200]	; (8000ebc <fsm_run+0x2cc>)
 8000df4:	f000 fe10 	bl	8001a18 <HAL_ADC_Start_IT>
				fsm->state = STATE_ADC;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	705a      	strb	r2, [r3, #1]
			break;
 8000dfe:	e056      	b.n	8000eae <fsm_run+0x2be>
			} else if ( fsm->event == EVT_TIME_REACHED ) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d116      	bne.n	8000e38 <fsm_run+0x248>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <fsm_run+0x2c8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f002 f886 	bl	8002f28 <HAL_GPIO_TogglePin>
				fsm->start_toggle_counter = ON;
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	7893      	ldrb	r3, [r2, #2]
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	7093      	strb	r3, [r2, #2]
				fsm->start_stop_alarm_counter = ON;
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	7893      	ldrb	r3, [r2, #2]
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	7093      	strb	r3, [r2, #2]
				fsm->state = STATE_ADC;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2204      	movs	r2, #4
 8000e34:	705a      	strb	r2, [r3, #1]
			break;
 8000e36:	e03a      	b.n	8000eae <fsm_run+0x2be>
			} else if ( fsm->event == EVT_TIME_TOGGLE ) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d10d      	bne.n	8000e5e <fsm_run+0x26e>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f002 f86e 	bl	8002f28 <HAL_GPIO_TogglePin>
				fsm->start_toggle_counter = ON;
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	7893      	ldrb	r3, [r2, #2]
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	7093      	strb	r3, [r2, #2]
				fsm->state = STATE_ADC;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2204      	movs	r2, #4
 8000e5a:	705a      	strb	r2, [r3, #1]
			break;
 8000e5c:	e027      	b.n	8000eae <fsm_run+0x2be>
			} else if ( fsm->event == EVT_TIME_STOP_ALARM ) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d122      	bne.n	8000eae <fsm_run+0x2be>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, OFF);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2140      	movs	r1, #64	; 0x40
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f002 f842 	bl	8002ef8 <HAL_GPIO_WritePin>
				fsm->start_toggle_counter = OFF;
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	7893      	ldrb	r3, [r2, #2]
 8000e78:	f36f 0382 	bfc	r3, #2, #1
 8000e7c:	7093      	strb	r3, [r2, #2]
				HAL_ADC_Start_IT(&hadc3);
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <fsm_run+0x2cc>)
 8000e80:	f000 fdca 	bl	8001a18 <HAL_ADC_Start_IT>
				fsm->state = STATE_ADC;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2204      	movs	r2, #4
 8000e88:	705a      	strb	r2, [r3, #1]
			break;
 8000e8a:	e010      	b.n	8000eae <fsm_run+0x2be>

		default: /*ERROR */
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ON);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f002 f830 	bl	8002ef8 <HAL_GPIO_WritePin>
			while(1){}
 8000e98:	e7fe      	b.n	8000e98 <fsm_run+0x2a8>
			break;
		}

	}
 8000e9a:	bf00      	nop
 8000e9c:	e008      	b.n	8000eb0 <fsm_run+0x2c0>
			break;
 8000e9e:	bf00      	nop
 8000ea0:	e006      	b.n	8000eb0 <fsm_run+0x2c0>
			break;
 8000ea2:	bf00      	nop
 8000ea4:	e004      	b.n	8000eb0 <fsm_run+0x2c0>
			break;
 8000ea6:	bf00      	nop
 8000ea8:	e002      	b.n	8000eb0 <fsm_run+0x2c0>
			break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <fsm_run+0x2c0>
			break;
 8000eae:	bf00      	nop
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000f8 	.word	0x200000f8
 8000ebc:	20000094 	.word	0x20000094
 8000ec0:	20000040 	.word	0x20000040
 8000ec4:	81742e05 	.word	0x81742e05

08000ec8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6593      	str	r3, [r2, #88]	; 0x58
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0x84>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12b      	bne.n	8000f9a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_ADC_MspInit+0x88>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f76:	230b      	movs	r3, #11
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <HAL_ADC_MspInit+0x8c>)
 8000f86:	f001 fdf7 	bl	8002b78 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	202f      	movs	r0, #47	; 0x2f
 8000f90:	f001 fd7b 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f94:	202f      	movs	r0, #47	; 0x2f
 8000f96:	f001 fd94 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	50040200 	.word	0x50040200
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000800 	.word	0x48000800

08000fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f001 fd53 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f001 fd6c 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_TIM_Base_MspInit+0x44>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d113      	bne.n	8001032 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_TIM_Base_MspInit+0x48>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <HAL_TIM_Base_MspInit+0x48>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_TIM_Base_MspInit+0x48>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201e      	movs	r0, #30
 8001028:	f001 fd2f 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800102c:	201e      	movs	r0, #30
 800102e:	f001 fd48 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40000800 	.word	0x40000800
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d11c      	bne.n	80010a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_TIM_MspPostInit+0x64>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_TIM_MspPostInit+0x64>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_TIM_MspPostInit+0x64>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800107e:	2320      	movs	r3, #32
 8001080:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 fd6c 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d130      	bne.n	8001130 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_UART_MspInit+0x90>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_UART_MspInit+0x90>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_MspInit+0x90>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_UART_MspInit+0x90>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_UART_MspInit+0x90>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_UART_MspInit+0x90>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 fd2c 	bl	8002b78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2026      	movs	r0, #38	; 0x26
 8001126:	f001 fcb0 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112a:	2026      	movs	r0, #38	; 0x26
 800112c:	f001 fcc9 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f8e4 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f003 fb11 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000f8 	.word	0x200000f8

080011b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM4_IRQHandler+0x10>)
 80011b6:	f003 fb07 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000054 	.word	0x20000054

080011c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <USART2_IRQHandler+0x10>)
 80011ca:	f004 fb3b 	bl	8005844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000138 	.word	0x20000138

080011d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011e0:	f001 febc 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <ADC3_IRQHandler+0x10>)
 80011ee:	f000 fd53 	bl	8001c98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000094 	.word	0x20000094

080011fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <SystemInit+0x64>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <SystemInit+0x64>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <SystemInit+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a13      	ldr	r2, [pc, #76]	; (8001264 <SystemInit+0x68>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <SystemInit+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SystemInit+0x68>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <SystemInit+0x68>)
 8001228:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800122c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <SystemInit+0x68>)
 8001234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001238:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <SystemInit+0x68>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <SystemInit+0x68>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <SystemInit+0x68>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SystemInit+0x64>)
 800124e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001252:	609a      	str	r2, [r3, #8]
#endif
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	40021000 	.word	0x40021000

08001268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800126c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800126e:	e003      	b.n	8001278 <LoopCopyDataInit>

08001270 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001272:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001274:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001276:	3104      	adds	r1, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800127c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800127e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001280:	d3f6      	bcc.n	8001270 <CopyDataInit>
	ldr	r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001284:	e002      	b.n	800128c <LoopFillZerobss>

08001286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001286:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001288:	f842 3b04 	str.w	r3, [r2], #4

0800128c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <LoopForever+0x16>)
	cmp	r2, r3
 800128e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001290:	d3f9      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001292:	f7ff ffb3 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f005 f95d 	bl	8006554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129a:	f7ff fa3b 	bl	8000714 <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012a4:	0800661c 	.word	0x0800661c
	ldr	r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80012b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80012b4:	200001bc 	.word	0x200001bc

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>

080012ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f001 fbd5 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f80e 	bl	80012ec <HAL_InitTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e001      	b.n	80012e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012dc:	f7ff fdfc 	bl	8000ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_InitTick+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d022      	beq.n	8001346 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_InitTick+0x6c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_InitTick+0x68>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800130c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fbe2 	bl	8002ade <HAL_SYSTICK_Config>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d809      	bhi.n	800133a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	2200      	movs	r2, #0
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132e:	f001 fbac 	bl	8002a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_InitTick+0x70>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e007      	b.n	800134a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e004      	b.n	800134a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000008 	.word	0x20000008
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x1c>)
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	200001b8 	.word	0x200001b8
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200001b8 	.word	0x200001b8

0800139c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001404:	b490      	push	{r4, r7}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3360      	adds	r3, #96	; 0x60
 8001416:	461a      	mov	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LL_ADC_SetOffset+0x40>)
 8001424:	4013      	ands	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	4313      	orrs	r3, r2
 8001432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001436:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	03fff000 	.word	0x03fff000

08001448 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001448:	b490      	push	{r4, r7}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3360      	adds	r3, #96	; 0x60
 8001456:	461a      	mov	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bc90      	pop	{r4, r7}
 800146e:	4770      	bx	lr

08001470 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001470:	b490      	push	{r4, r7}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3360      	adds	r3, #96	; 0x60
 8001480:	461a      	mov	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bc90      	pop	{r4, r7}
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c6:	b490      	push	{r4, r7}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3330      	adds	r3, #48	; 0x30
 80014d6:	461a      	mov	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	4413      	add	r3, r2
 80014e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80014e6:	6822      	ldr	r2, [r4, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	211f      	movs	r1, #31
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	f003 011f 	and.w	r1, r3, #31
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bc90      	pop	{r4, r7}
 8001516:	4770      	bx	lr

08001518 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800153e:	b490      	push	{r4, r7}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3314      	adds	r3, #20
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	0e5b      	lsrs	r3, r3, #25
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0d1b      	lsrs	r3, r3, #20
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2107      	movs	r1, #7
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	401a      	ands	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	0d1b      	lsrs	r3, r3, #20
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bc90      	pop	{r4, r7}
 800158c:	4770      	bx	lr
	...

08001590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0318 	and.w	r3, r3, #24
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015b4:	40d9      	lsrs	r1, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	400b      	ands	r3, r1
 80015ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	0007ffff 	.word	0x0007ffff

080015d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6093      	str	r3, [r2, #8]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001648:	d101      	bne.n	800164e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800166c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001670:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001698:	d101      	bne.n	800169e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <LL_ADC_IsEnabled+0x18>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <LL_ADC_IsEnabled+0x1a>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800170a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800170e:	f043 0204 	orr.w	r2, r3, #4
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b04      	cmp	r3, #4
 8001734:	d101      	bne.n	800173a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b08      	cmp	r3, #8
 800175a:	d101      	bne.n	8001760 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e134      	b.n	80019f4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fbc1 	bl	8000f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff3f 	bl	8001634 <LL_ADC_IsDeepPowerDownEnabled>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff25 	bl	8001610 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff5a 	bl	8001684 <LL_ADC_IsInternalRegulatorEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d113      	bne.n	80017fe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff3e 	bl	800165c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017e0:	4b86      	ldr	r3, [pc, #536]	; (80019fc <HAL_ADC_Init+0x28c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	4a86      	ldr	r2, [pc, #536]	; (8001a00 <HAL_ADC_Init+0x290>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff3e 	bl	8001684 <LL_ADC_IsInternalRegulatorEnabled>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff77 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 8001834:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80cf 	bne.w	80019e2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 80cb 	bne.w	80019e2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001854:	f043 0202 	orr.w	r2, r3, #2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff37 	bl	80016d4 <LL_ADC_IsEnabled>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d115      	bne.n	8001898 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800186c:	4865      	ldr	r0, [pc, #404]	; (8001a04 <HAL_ADC_Init+0x294>)
 800186e:	f7ff ff31 	bl	80016d4 <LL_ADC_IsEnabled>
 8001872:	4604      	mov	r4, r0
 8001874:	4864      	ldr	r0, [pc, #400]	; (8001a08 <HAL_ADC_Init+0x298>)
 8001876:	f7ff ff2d 	bl	80016d4 <LL_ADC_IsEnabled>
 800187a:	4603      	mov	r3, r0
 800187c:	431c      	orrs	r4, r3
 800187e:	4863      	ldr	r0, [pc, #396]	; (8001a0c <HAL_ADC_Init+0x29c>)
 8001880:	f7ff ff28 	bl	80016d4 <LL_ADC_IsEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	4323      	orrs	r3, r4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4619      	mov	r1, r3
 8001892:	485f      	ldr	r0, [pc, #380]	; (8001a10 <HAL_ADC_Init+0x2a0>)
 8001894:	f7ff fd82 	bl	800139c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7e5b      	ldrb	r3, [r3, #25]
 800189c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d106      	bne.n	80018d4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	3b01      	subs	r3, #1
 80018cc:	045b      	lsls	r3, r3, #17
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_ADC_Init+0x2a4>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	430b      	orrs	r3, r1
 8001902:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff0a 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 800190e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff17 	bl	8001748 <LL_ADC_INJ_IsConversionOngoing>
 800191a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d13d      	bne.n	800199e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13a      	bne.n	800199e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800192c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001934:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001944:	f023 0302 	bic.w	r3, r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	69b9      	ldr	r1, [r7, #24]
 800194e:	430b      	orrs	r3, r1
 8001950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001958:	2b01      	cmp	r3, #1
 800195a:	d118      	bne.n	800198e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001978:	4311      	orrs	r1, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800197e:	430a      	orrs	r2, r1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	e007      	b.n	800199e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10c      	bne.n	80019c0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f023 010f 	bic.w	r1, r3, #15
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
 80019be:	e007      	b.n	80019d0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 020f 	bic.w	r2, r2, #15
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	f023 0303 	bic.w	r3, r3, #3
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
 80019e0:	e007      	b.n	80019f2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f043 0210 	orr.w	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3724      	adds	r7, #36	; 0x24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	20000000 	.word	0x20000000
 8001a00:	053e2d63 	.word	0x053e2d63
 8001a04:	50040000 	.word	0x50040000
 8001a08:	50040100 	.word	0x50040100
 8001a0c:	50040200 	.word	0x50040200
 8001a10:	50040300 	.word	0x50040300
 8001a14:	fff0c007 	.word	0xfff0c007

08001a18 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a20:	4893      	ldr	r0, [pc, #588]	; (8001c70 <HAL_ADC_Start_IT+0x258>)
 8001a22:	f7ff fdd9 	bl	80015d8 <LL_ADC_GetMultimode>
 8001a26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fe78 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 8112 	bne.w	8001c5e <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_Start_IT+0x30>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e10f      	b.n	8001c68 <HAL_ADC_Start_IT+0x250>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 feb3 	bl	80027bc <ADC_Enable>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 80f9 	bne.w	8001c54 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7e      	ldr	r2, [pc, #504]	; (8001c74 <HAL_ADC_Start_IT+0x25c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d002      	beq.n	8001a86 <HAL_ADC_Start_IT+0x6e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e000      	b.n	8001a88 <HAL_ADC_Start_IT+0x70>
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_ADC_Start_IT+0x260>)
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f023 0206 	bic.w	r2, r3, #6
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	659a      	str	r2, [r3, #88]	; 0x58
 8001aba:	e002      	b.n	8001ac2 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	221c      	movs	r2, #28
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 021c 	bic.w	r2, r2, #28
 8001ae0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d108      	bne.n	8001afc <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0208 	orr.w	r2, r2, #8
 8001af8:	605a      	str	r2, [r3, #4]
          break;
 8001afa:	e008      	b.n	8001b0e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0204 	orr.w	r2, r2, #4
 8001b0a:	605a      	str	r2, [r3, #4]
          break;
 8001b0c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0210 	orr.w	r2, r2, #16
 8001b24:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_ADC_Start_IT+0x25c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_Start_IT+0x11e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e000      	b.n	8001b38 <HAL_ADC_Start_IT+0x120>
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_ADC_Start_IT+0x260>)
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d002      	beq.n	8001b52 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d13b      	bne.n	8001bca <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d02d      	beq.n	8001bbc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d110      	bne.n	8001b9a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0220 	bic.w	r2, r2, #32
 8001b86:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b96:	605a      	str	r2, [r3, #4]
              break;
 8001b98:	e011      	b.n	8001bbe <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	605a      	str	r2, [r3, #4]
              break;
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001bbc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fd99 	bl	80016fa <LL_ADC_REG_StartConversion>
 8001bc8:	e04d      	b.n	8001c66 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_ADC_Start_IT+0x25c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d002      	beq.n	8001be6 <HAL_ADC_Start_IT+0x1ce>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	e000      	b.n	8001be8 <HAL_ADC_Start_IT+0x1d0>
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_ADC_Start_IT+0x260>)
 8001be8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d036      	beq.n	8001c64 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d110      	bne.n	8001c30 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0220 	bic.w	r2, r2, #32
 8001c1c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2c:	605a      	str	r2, [r3, #4]
              break;
 8001c2e:	e01a      	b.n	8001c66 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c3e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	605a      	str	r2, [r3, #4]
              break;
 8001c50:	bf00      	nop
 8001c52:	e008      	b.n	8001c66 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	75fb      	strb	r3, [r7, #23]
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_Start_IT+0x24e>
        }
 8001c64:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	50040300 	.word	0x50040300
 8001c74:	50040100 	.word	0x50040100
 8001c78:	50040000 	.word	0x50040000

08001c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb4:	4882      	ldr	r0, [pc, #520]	; (8001ec0 <HAL_ADC_IRQHandler+0x228>)
 8001cb6:	f7ff fc8f 	bl	80015d8 <LL_ADC_GetMultimode>
 8001cba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d017      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x5e>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fde9 	bl	80028c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_IRQHandler+0x72>
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8083 	beq.w	8001e1c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d07d      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fbaf 	bl	80014a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d062      	beq.n	8001e0e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_ADC_IRQHandler+0x22c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d002      	beq.n	8001d58 <HAL_ADC_IRQHandler+0xc0>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_IRQHandler+0xc2>
 8001d58:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <HAL_ADC_IRQHandler+0x230>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d008      	beq.n	8001d74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d002      	beq.n	8001d74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d104      	bne.n	8001d7e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	e00c      	b.n	8001d98 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a50      	ldr	r2, [pc, #320]	; (8001ec4 <HAL_ADC_IRQHandler+0x22c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d002      	beq.n	8001d8e <HAL_ADC_IRQHandler+0xf6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	e000      	b.n	8001d90 <HAL_ADC_IRQHandler+0xf8>
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <HAL_ADC_IRQHandler+0x230>)
 8001d90:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d135      	bne.n	8001e0e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d12e      	bne.n	8001e0e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fcb4 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11a      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020c 	bic.w	r2, r2, #12
 8001dce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d112      	bne.n	8001e0e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
 8001df4:	e00b      	b.n	8001e0e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fb74 	bl	80004fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	220c      	movs	r2, #12
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_IRQHandler+0x198>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 809f 	beq.w	8001f7a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8099 	beq.w	8001f7a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fb57 	bl	8001518 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e6a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fb15 	bl	80014a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e76:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_ADC_IRQHandler+0x22c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x1f0>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_IRQHandler+0x1f2>
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_ADC_IRQHandler+0x230>)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d008      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d002      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d104      	bne.n	8001eae <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	e013      	b.n	8001ed6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_ADC_IRQHandler+0x22c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x234>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e007      	b.n	8001ece <HAL_ADC_IRQHandler+0x236>
 8001ebe:	bf00      	nop
 8001ec0:	50040300 	.word	0x50040300
 8001ec4:	50040100 	.word	0x50040100
 8001ec8:	50040000 	.word	0x50040000
 8001ecc:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <HAL_ADC_IRQHandler+0x42c>)
 8001ece:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10c      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d142      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d03f      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d13a      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d133      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d12e      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc18 	bl	8001748 <LL_ADC_INJ_IsConversionOngoing>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11a      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f2c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
 8001f52:	e00b      	b.n	8001f6c <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fc7f 	bl	8002870 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2260      	movs	r2, #96	; 0x60
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d011      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x310>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f896 	bl	80020cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d012      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x340>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fc65 	bl	8002898 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_ADC_IRQHandler+0x370>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fc57 	bl	80028ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d036      	beq.n	8002080 <HAL_ADC_IRQHandler+0x3e8>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d031      	beq.n	8002080 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	e014      	b.n	8002054 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002030:	4825      	ldr	r0, [pc, #148]	; (80020c8 <HAL_ADC_IRQHandler+0x430>)
 8002032:	f7ff fadf 	bl	80015f4 <LL_ADC_GetMultiDMATransfer>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800203c:	2301      	movs	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	e008      	b.n	8002054 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002050:	2301      	movs	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10e      	bne.n	8002078 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f834 	bl	80020e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d018      	beq.n	80020bc <HAL_ADC_IRQHandler+0x424>
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f043 0208 	orr.w	r2, r3, #8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fbe4 	bl	8002884 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	50040000 	.word	0x50040000
 80020c8:	50040300 	.word	0x50040300

080020cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0a6      	sub	sp, #152	; 0x98
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x22>
 8002112:	2302      	movs	r3, #2
 8002114:	e348      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x6b4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fafd 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8329 	bne.w	8002782 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d824      	bhi.n	8002182 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	3b02      	subs	r3, #2
 800213e:	2b03      	cmp	r3, #3
 8002140:	d81b      	bhi.n	800217a <HAL_ADC_ConfigChannel+0x86>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <HAL_ADC_ConfigChannel+0x54>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002159 	.word	0x08002159
 800214c:	08002161 	.word	0x08002161
 8002150:	08002169 	.word	0x08002169
 8002154:	08002171 	.word	0x08002171
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	220c      	movs	r2, #12
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e011      	b.n	8002184 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2212      	movs	r2, #18
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e00d      	b.n	8002184 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2218      	movs	r2, #24
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	e009      	b.n	8002184 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	e004      	b.n	8002184 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2206      	movs	r2, #6
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	e000      	b.n	8002184 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002182:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff f998 	bl	80014c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fac1 	bl	8001722 <LL_ADC_REG_IsConversionOngoing>
 80021a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff facd 	bl	8001748 <LL_ADC_INJ_IsConversionOngoing>
 80021ae:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8148 	bne.w	800244c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8143 	bne.w	800244c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f7ff f9b3 	bl	800153e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d00a      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6919      	ldr	r1, [r3, #16]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800220a:	f7ff f8fb 	bl	8001404 <LL_ADC_SetOffset>
 800220e:	e11d      	b.n	800244c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f916 	bl	8001448 <LL_ADC_GetOffsetChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x148>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f90b 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	e012      	b.n	8002262 <HAL_ADC_ConfigChannel+0x16e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f900 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_ConfigChannel+0x186>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	e00a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x19c>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f8e7 	bl	8001470 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f8cd 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x1da>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f8c2 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	e010      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1fc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f8b7 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x214>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	e00a      	b.n	800231e <HAL_ADC_ConfigChannel+0x22a>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	429a      	cmp	r2, r3
 8002320:	d106      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f8a0 	bl	8001470 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f886 	bl	8001448 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x268>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f87b 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	e010      	b.n	800237e <HAL_ADC_ConfigChannel+0x28a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f870 	bl	8001448 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x2a2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0e9b      	lsrs	r3, r3, #26
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	e00a      	b.n	80023ac <HAL_ADC_ConfigChannel+0x2b8>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d106      	bne.n	80023be <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2102      	movs	r1, #2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f859 	bl	8001470 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2103      	movs	r1, #3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff f83f 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x2f6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2103      	movs	r1, #3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f834 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	0e9b      	lsrs	r3, r3, #26
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	e010      	b.n	800240c <HAL_ADC_ConfigChannel+0x318>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2103      	movs	r1, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f829 	bl	8001448 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x330>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	e00a      	b.n	800243a <HAL_ADC_ConfigChannel+0x346>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2103      	movs	r1, #3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f812 	bl	8001470 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f93f 	bl	80016d4 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 810c 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f7ff f890 	bl	8001590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4aad      	ldr	r2, [pc, #692]	; (800272c <HAL_ADC_ConfigChannel+0x638>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 80fd 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x3b0>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b09      	cmp	r3, #9
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e012      	b.n	80024ca <HAL_ADC_ConfigChannel+0x3d6>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d064      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x3f6>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	3301      	adds	r3, #1
 80024e2:	069b      	lsls	r3, r3, #26
 80024e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e8:	e00e      	b.n	8002508 <HAL_ADC_ConfigChannel+0x414>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x434>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	e010      	b.n	800254a <HAL_ADC_ConfigChannel+0x456>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	ea42 0103 	orr.w	r1, r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x47c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	e011      	b.n	8002594 <HAL_ADC_ConfigChannel+0x4a0>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
 8002596:	e069      	b.n	800266c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x4c0>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b2:	e00e      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x4de>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	61fb      	str	r3, [r7, #28]
  return result;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x4fe>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	e010      	b.n	8002614 <HAL_ADC_ConfigChannel+0x520>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	617b      	str	r3, [r7, #20]
  return result;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	ea42 0103 	orr.w	r1, r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x54c>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	3b1e      	subs	r3, #30
 8002638:	051b      	lsls	r3, r3, #20
 800263a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800263e:	e014      	b.n	800266a <HAL_ADC_ConfigChannel+0x576>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	60fb      	str	r3, [r7, #12]
  return result;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	3b1e      	subs	r3, #30
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	430b      	orrs	r3, r1
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6892      	ldr	r2, [r2, #8]
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe ff64 	bl	800153e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_ADC_ConfigChannel+0x63c>)
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 808c 	beq.w	800279c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002684:	482b      	ldr	r0, [pc, #172]	; (8002734 <HAL_ADC_ConfigChannel+0x640>)
 8002686:	f7fe feaf 	bl	80013e8 <LL_ADC_GetCommonPathInternalCh>
 800268a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a29      	ldr	r2, [pc, #164]	; (8002738 <HAL_ADC_ConfigChannel+0x644>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d12b      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x5fc>
 8002698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800269c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d125      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_ADC_ConfigChannel+0x648>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x5c4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_ADC_ConfigChannel+0x64c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d16e      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c0:	4619      	mov	r1, r3
 80026c2:	481c      	ldr	r0, [pc, #112]	; (8002734 <HAL_ADC_ConfigChannel+0x640>)
 80026c4:	f7fe fe7d 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_ADC_ConfigChannel+0x650>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_ADC_ConfigChannel+0x654>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099a      	lsrs	r2, r3, #6
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ee:	e052      	b.n	8002796 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_ADC_ConfigChannel+0x658>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d12a      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x65c>
 80026fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d124      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a0c      	ldr	r2, [pc, #48]	; (800273c <HAL_ADC_ConfigChannel+0x648>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_ADC_ConfigChannel+0x626>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_ADC_ConfigChannel+0x64c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d13f      	bne.n	800279a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	4619      	mov	r1, r3
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <HAL_ADC_ConfigChannel+0x640>)
 8002726:	f7fe fe4c 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800272a:	e036      	b.n	800279a <HAL_ADC_ConfigChannel+0x6a6>
 800272c:	407f0000 	.word	0x407f0000
 8002730:	80080000 	.word	0x80080000
 8002734:	50040300 	.word	0x50040300
 8002738:	c7520000 	.word	0xc7520000
 800273c:	50040000 	.word	0x50040000
 8002740:	50040200 	.word	0x50040200
 8002744:	20000000 	.word	0x20000000
 8002748:	053e2d63 	.word	0x053e2d63
 800274c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_ADC_ConfigChannel+0x6bc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d120      	bne.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800275a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11a      	bne.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_ADC_ConfigChannel+0x6c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d115      	bne.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002778:	4619      	mov	r1, r3
 800277a:	480f      	ldr	r0, [pc, #60]	; (80027b8 <HAL_ADC_ConfigChannel+0x6c4>)
 800277c:	f7fe fe21 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
 8002780:	e00c      	b.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002794:	e002      	b.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3798      	adds	r7, #152	; 0x98
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	80000001 	.word	0x80000001
 80027b4:	50040000 	.word	0x50040000
 80027b8:	50040300 	.word	0x50040300

080027bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe ff83 	bl	80016d4 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d146      	bne.n	8002862 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <ADC_Enable+0xb0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e032      	b.n	8002864 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe ff52 	bl	80016ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002808:	f7fe fdbc 	bl	8001384 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800280e:	e021      	b.n	8002854 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ff5d 	bl	80016d4 <LL_ADC_IsEnabled>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe ff41 	bl	80016ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800282a:	f7fe fdab 	bl	8001384 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d90d      	bls.n	8002854 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0210 	orr.w	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d1d6      	bne.n	8002810 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	8000003f 	.word	0x8000003f

08002870 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff29 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff3e 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff31 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d005      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e029      	b.n	8002b6e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 020e 	bic.w	r2, r2, #14
 8002b28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f003 021c 	and.w	r2, r3, #28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
    }
  }
  return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e17f      	b.n	8002e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8171 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_GPIO_Init+0x48>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d007      	beq.n	8002bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d130      	bne.n	8002c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0201 	and.w	r2, r3, #1
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d118      	bne.n	8002c60 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x128>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b12      	cmp	r3, #18
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	6939      	ldr	r1, [r7, #16]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ac 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6613      	str	r3, [r2, #96]	; 0x60
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d42:	4a59      	ldr	r2, [pc, #356]	; (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x242>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <HAL_GPIO_Init+0x344>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a49      	ldr	r2, [pc, #292]	; (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dcc:	4936      	ldr	r1, [pc, #216]	; (8002ea8 <HAL_GPIO_Init+0x330>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dfe:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f47f ae78 	bne.w	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	48000400 	.word	0x48000400
 8002eb0:	48000800 	.word	0x48000800
 8002eb4:	48000c00 	.word	0x48000c00
 8002eb8:	48001000 	.word	0x48001000
 8002ebc:	48001400 	.word	0x48001400
 8002ec0:	48001800 	.word	0x48001800
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e001      	b.n	8002eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f46:	e002      	b.n	8002f4e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd faa4 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d130      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d038      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2232      	movs	r2, #50	; 0x32
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fec:	e002      	b.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d102      	bne.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f2      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d110      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d007      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003036:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40007000 	.word	0x40007000
 800304c:	20000000 	.word	0x20000000
 8003050:	431bde83 	.word	0x431bde83

08003054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e3d4      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003066:	4ba1      	ldr	r3, [pc, #644]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003070:	4b9e      	ldr	r3, [pc, #632]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80e4 	beq.w	8003250 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_RCC_OscConfig+0x4a>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	f040 808b 	bne.w	80031ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 8087 	bne.w	80031ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309e:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e3ac      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCC_OscConfig+0x7c>
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ce:	e005      	b.n	80030dc <HAL_RCC_OscConfig+0x88>
 80030d0:	4b86      	ldr	r3, [pc, #536]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d223      	bcs.n	8003128 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fd3f 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e38d      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f4:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7c      	ldr	r2, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b7a      	ldr	r3, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4977      	ldr	r1, [pc, #476]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	4972      	ldr	r1, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	e025      	b.n	8003174 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003128:	4b70      	ldr	r3, [pc, #448]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6f      	ldr	r2, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b6d      	ldr	r3, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	496a      	ldr	r1, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003146:	4b69      	ldr	r3, [pc, #420]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4965      	ldr	r1, [pc, #404]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fcff 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e34d      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003174:	f000 fc36 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003178:	4601      	mov	r1, r0
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_RCC_OscConfig+0x29c>)
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa21 f303 	lsr.w	r3, r1, r3
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x2a0>)
 8003192:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003194:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x2a4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe f8a7 	bl	80012ec <HAL_InitTick>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d052      	beq.n	800324e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	e331      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d032      	beq.n	800321a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c0:	f7fe f8e0 	bl	8001384 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c8:	f7fe f8dc 	bl	8001384 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e31a      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031da:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a40      	ldr	r2, [pc, #256]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	493b      	ldr	r1, [pc, #236]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	4936      	ldr	r1, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e01a      	b.n	8003250 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a33      	ldr	r2, [pc, #204]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003226:	f7fe f8ad 	bl	8001384 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800322e:	f7fe f8a9 	bl	8001384 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e2e7      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003240:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x1da>
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800324e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d074      	beq.n	8003346 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x21a>
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d10e      	bne.n	8003286 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d064      	beq.n	8003344 <HAL_RCC_OscConfig+0x2f0>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d160      	bne.n	8003344 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e2c4      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x24a>
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e01d      	b.n	80032da <HAL_RCC_OscConfig+0x286>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x26e>
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0x286>
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x298>)
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01c      	beq.n	800331c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe f84f 	bl	8001384 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e8:	e011      	b.n	800330e <HAL_RCC_OscConfig+0x2ba>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	080065c4 	.word	0x080065c4
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe f842 	bl	8001384 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e280      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330e:	4baf      	ldr	r3, [pc, #700]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x2a8>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f832 	bl	8001384 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe f82e 	bl	8001384 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e26c      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003336:	4ba5      	ldr	r3, [pc, #660]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d0>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d060      	beq.n	8003414 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x310>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d119      	bne.n	8003392 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d116      	bne.n	8003392 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	4b99      	ldr	r3, [pc, #612]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x328>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e249      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b93      	ldr	r3, [pc, #588]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	4990      	ldr	r1, [pc, #576]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003390:	e040      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d023      	beq.n	80033e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339a:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a8b      	ldr	r2, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fd ffed 	bl	8001384 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fd ffe9 	bl	8001384 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e227      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	497c      	ldr	r1, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e018      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a79      	ldr	r2, [pc, #484]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fd ffc9 	bl	8001384 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fd ffc5 	bl	8001384 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e203      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003408:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d03c      	beq.n	800349a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01c      	beq.n	8003462 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	4a67      	ldr	r2, [pc, #412]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd ffa4 	bl	8001384 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd ffa0 	bl	8001384 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1de      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003452:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ef      	beq.n	8003440 <HAL_RCC_OscConfig+0x3ec>
 8003460:	e01b      	b.n	800349a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003462:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fd ff87 	bl	8001384 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7fd ff83 	bl	8001384 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1c1      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800348c:	4b4f      	ldr	r3, [pc, #316]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ef      	bne.n	800347a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a6 	beq.w	80035f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a43      	ldr	r2, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	4b3e      	ldr	r3, [pc, #248]	; (80035d0 <HAL_RCC_OscConfig+0x57c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d118      	bne.n	8003512 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x57c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <HAL_RCC_OscConfig+0x57c>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7fd ff4a 	bl	8001384 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fd ff46 	bl	8001384 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e184      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <HAL_RCC_OscConfig+0x57c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_RCC_OscConfig+0x4d8>
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800352a:	e024      	b.n	8003576 <HAL_RCC_OscConfig+0x522>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d110      	bne.n	8003556 <HAL_RCC_OscConfig+0x502>
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	4a24      	ldr	r2, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a20      	ldr	r2, [pc, #128]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003554:	e00f      	b.n	8003576 <HAL_RCC_OscConfig+0x522>
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fd ff01 	bl	8001384 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fd fefd 	bl	8001384 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e139      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x578>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ed      	beq.n	8003586 <HAL_RCC_OscConfig+0x532>
 80035aa:	e01a      	b.n	80035e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fd feea 	bl	8001384 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fd fee6 	bl	8001384 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d906      	bls.n	80035d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e122      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d4:	4b90      	ldr	r3, [pc, #576]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e8      	bne.n	80035b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4b8b      	ldr	r3, [pc, #556]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a8a      	ldr	r2, [pc, #552]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80035ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8108 	beq.w	800380e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	2b02      	cmp	r3, #2
 8003604:	f040 80d0 	bne.w	80037a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003608:	4b83      	ldr	r3, [pc, #524]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d130      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	3b01      	subs	r3, #1
 8003628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d127      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d11f      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003648:	2a07      	cmp	r2, #7
 800364a:	bf14      	ite	ne
 800364c:	2201      	movne	r2, #1
 800364e:	2200      	moveq	r2, #0
 8003650:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003652:	4293      	cmp	r3, r2
 8003654:	d113      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d109      	bne.n	800367e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d06e      	beq.n	800375c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d069      	beq.n	8003758 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003690:	4b61      	ldr	r3, [pc, #388]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b7      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036a0:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5c      	ldr	r2, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ac:	f7fd fe6a 	bl	8001384 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd fe66 	bl	8001384 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0a4      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c6:	4b54      	ldr	r3, [pc, #336]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4b51      	ldr	r3, [pc, #324]	; (800381c <HAL_RCC_OscConfig+0x7c8>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ec:	0212      	lsls	r2, r2, #8
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0552      	lsls	r2, r2, #21
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003700:	0852      	lsrs	r2, r2, #1
 8003702:	3a01      	subs	r2, #1
 8003704:	0652      	lsls	r2, r2, #25
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370c:	0912      	lsrs	r2, r2, #4
 800370e:	0452      	lsls	r2, r2, #17
 8003710:	430a      	orrs	r2, r1
 8003712:	4941      	ldr	r1, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003718:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003730:	f7fd fe28 	bl	8001384 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd fe24 	bl	8001384 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e062      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003756:	e05a      	b.n	800380e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e059      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d152      	bne.n	800380e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003780:	f7fd fe00 	bl	8001384 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd fdfc 	bl	8001384 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03a      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x734>
 80037a6:	e032      	b.n	800380e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d02d      	beq.n	800380a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7fd fdcf 	bl	8001384 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fd fdcb 	bl	8001384 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e009      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x7c4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x796>
 8003808:	e001      	b.n	800380e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	f99d808c 	.word	0xf99d808c

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0c8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4961      	ldr	r1, [pc, #388]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b0      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04c      	beq.n	800390a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e09e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e092      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e086      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e07e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c8:	4b42      	ldr	r3, [pc, #264]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 0203 	bic.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	493f      	ldr	r1, [pc, #252]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038da:	f7fd fd53 	bl	8001384 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e2:	f7fd fd4f 	bl	8001384 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e066      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 020c 	and.w	r2, r3, #12
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	429a      	cmp	r2, r3
 8003908:	d1eb      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	492c      	ldr	r1, [pc, #176]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d210      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	4924      	ldr	r1, [pc, #144]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e036      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4918      	ldr	r1, [pc, #96]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4910      	ldr	r1, [pc, #64]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003996:	f000 f825 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399a:	4601      	mov	r1, r0
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	fa21 f303 	lsr.w	r3, r1, r3
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fc96 	bl	80012ec <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	080065c4 	.word	0x080065c4
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a34:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a40:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5c:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e004      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d133      	bne.n	8003ada <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0xaa>
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8a:	617b      	str	r3, [r7, #20]
      break;
 8003a8c:	e005      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	617b      	str	r3, [r7, #20]
      break;
 8003a98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	fb02 f203 	mul.w	r2, r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ada:	69bb      	ldr	r3, [r7, #24]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3724      	adds	r7, #36	; 0x24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	080065dc 	.word	0x080065dc
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	007a1200 	.word	0x007a1200

08003af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b14:	f7ff fff0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	080065d4 	.word	0x080065d4

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b40:	f7ff ffda 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0adb      	lsrs	r3, r3, #11
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	080065d4 	.word	0x080065d4

08003b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b80:	f7ff fa04 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003b84:	6178      	str	r0, [r7, #20]
 8003b86:	e014      	b.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba0:	f7ff f9f4 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb8:	d10b      	bne.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d919      	bls.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc4:	d902      	bls.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e013      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bcc:	2301      	movs	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e010      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d902      	bls.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bd8:	2303      	movs	r3, #3
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e00a      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d102      	bne.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be4:	2302      	movs	r3, #2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e004      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b70      	cmp	r3, #112	; 0x70
 8003bee:	d101      	bne.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	4909      	ldr	r1, [pc, #36]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40022000 	.word	0x40022000

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03f      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d01c      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c52:	d802      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c58:	e01f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c64:	d01c      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c66:	e018      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c68:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a84      	ldr	r2, [pc, #528]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c74:	e015      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fab9 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c86:	e00c      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3320      	adds	r3, #32
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fba0 	bl	80043d4 <RCCEx_PLLSAI2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca8:	4b75      	ldr	r3, [pc, #468]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb6:	4972      	ldr	r1, [pc, #456]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03f      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d01c      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cde:	d802      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003ce4:	e01f      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf0:	d01c      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003cf2:	e018      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cf4:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a61      	ldr	r2, [pc, #388]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d00:	e015      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa73 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d12:	e00c      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3320      	adds	r3, #32
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fb5a 	bl	80043d4 <RCCEx_PLLSAI2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	74fb      	strb	r3, [r7, #19]
      break;
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d34:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	494f      	ldr	r1, [pc, #316]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a0 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da0:	f7fd faf0 	bl	8001384 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fd faec 	bl	8001384 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dba:	e005      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d15c      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01f      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d019      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fd faab 	bl	8001384 <HAL_GetTick>
 8003e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e30:	e00b      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd faa7 	bl	8001384 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d902      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	74fb      	strb	r3, [r7, #19]
            break;
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ec      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	4904      	ldr	r1, [pc, #16]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e76:	e009      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8c:	7c7b      	ldrb	r3, [r7, #17]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4b9e      	ldr	r3, [pc, #632]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	4a9d      	ldr	r2, [pc, #628]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eaa:	4b98      	ldr	r3, [pc, #608]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f023 0203 	bic.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	4994      	ldr	r1, [pc, #592]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ecc:	4b8f      	ldr	r3, [pc, #572]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f023 020c 	bic.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	498c      	ldr	r1, [pc, #560]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eee:	4b87      	ldr	r3, [pc, #540]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4983      	ldr	r1, [pc, #524]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f10:	4b7e      	ldr	r3, [pc, #504]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	497b      	ldr	r1, [pc, #492]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f32:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	4972      	ldr	r1, [pc, #456]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f54:	4b6d      	ldr	r3, [pc, #436]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	496a      	ldr	r1, [pc, #424]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	4961      	ldr	r1, [pc, #388]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f98:	4b5c      	ldr	r3, [pc, #368]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	4959      	ldr	r1, [pc, #356]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fba:	4b54      	ldr	r3, [pc, #336]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc8:	4950      	ldr	r1, [pc, #320]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	4948      	ldr	r1, [pc, #288]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ffe:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	493f      	ldr	r1, [pc, #252]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d028      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004020:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	4937      	ldr	r1, [pc, #220]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403e:	d106      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a31      	ldr	r2, [pc, #196]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
 800404c:	e011      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004056:	d10c      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f8c8 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d028      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	491f      	ldr	r1, [pc, #124]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409c:	d106      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4a1a      	ldr	r2, [pc, #104]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a8:	60d3      	str	r3, [r2, #12]
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f899 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fa:	d109      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004106:	60d3      	str	r3, [r2, #12]
 8004108:	e014      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004118:	d10c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f867 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414e:	4928      	ldr	r1, [pc, #160]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415e:	d10d      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f844 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d014      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
 800417a:	e011      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3320      	adds	r3, #32
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f921 	bl	80043d4 <RCCEx_PLLSAI2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	490d      	ldr	r1, [pc, #52]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d018      	beq.n	8004240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800420e:	4b70      	ldr	r3, [pc, #448]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d10d      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
       ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004226:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
       ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d044      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	e041      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d00c      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x6e>
 8004248:	2b03      	cmp	r3, #3
 800424a:	d013      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x80>
 800424c:	2b01      	cmp	r3, #1
 800424e:	d120      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004250:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004260:	e01a      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004262:	4b5b      	ldr	r3, [pc, #364]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	2b00      	cmp	r3, #0
 800426c:	d116      	bne.n	800429c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004272:	e013      	b.n	800429c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004274:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004290:	e006      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      break;
 8004296:	e004      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042a8:	4b49      	ldr	r3, [pc, #292]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	430b      	orrs	r3, r1
 80042be:	4944      	ldr	r1, [pc, #272]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d17d      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d6:	f7fd f855 	bl	8001384 <HAL_GetTick>
 80042da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042dc:	e009      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042de:	f7fd f851 	bl	8001384 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	73fb      	strb	r3, [r7, #15]
        break;
 80042f0:	e005      	b.n	80042fe <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ef      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d160      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d111      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6892      	ldr	r2, [r2, #8]
 800431a:	0211      	lsls	r1, r2, #8
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68d2      	ldr	r2, [r2, #12]
 8004320:	0912      	lsrs	r2, r2, #4
 8004322:	0452      	lsls	r2, r2, #17
 8004324:	430a      	orrs	r2, r1
 8004326:	492a      	ldr	r1, [pc, #168]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]
 800432c:	e027      	b.n	800437e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d112      	bne.n	800435a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800433c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6892      	ldr	r2, [r2, #8]
 8004344:	0211      	lsls	r1, r2, #8
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6912      	ldr	r2, [r2, #16]
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0552      	lsls	r2, r2, #21
 8004350:	430a      	orrs	r2, r1
 8004352:	491f      	ldr	r1, [pc, #124]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	610b      	str	r3, [r1, #16]
 8004358:	e011      	b.n	800437e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6892      	ldr	r2, [r2, #8]
 800436a:	0211      	lsls	r1, r2, #8
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6952      	ldr	r2, [r2, #20]
 8004370:	0852      	lsrs	r2, r2, #1
 8004372:	3a01      	subs	r2, #1
 8004374:	0652      	lsls	r2, r2, #25
 8004376:	430a      	orrs	r2, r1
 8004378:	4915      	ldr	r1, [pc, #84]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fc fffb 	bl	8001384 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004390:	e009      	b.n	80043a6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004392:	f7fc fff7 	bl	8001384 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d902      	bls.n	80043a6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	73fb      	strb	r3, [r7, #15]
          break;
 80043a4:	e005      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ef      	beq.n	8004392 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000

080043d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e2:	4b68      	ldr	r3, [pc, #416]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d018      	beq.n	8004420 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0203 	and.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10d      	bne.n	800441a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
       ||
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
       ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d044      	beq.n	80044a4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	e041      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d00c      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0x6e>
 8004428:	2b03      	cmp	r3, #3
 800442a:	d013      	beq.n	8004454 <RCCEx_PLLSAI2_Config+0x80>
 800442c:	2b01      	cmp	r3, #1
 800442e:	d120      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004430:	4b54      	ldr	r3, [pc, #336]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11d      	bne.n	8004478 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e01a      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004442:	4b50      	ldr	r3, [pc, #320]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e013      	b.n	800447c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004460:	4b48      	ldr	r3, [pc, #288]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004470:	e006      	b.n	8004480 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      break;
 8004476:	e004      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004480:	bf00      	nop
    }

    if(status == HAL_OK)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004488:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	3b01      	subs	r3, #1
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	430b      	orrs	r3, r1
 800449e:	4939      	ldr	r1, [pc, #228]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d167      	bne.n	800457a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a35      	ldr	r2, [pc, #212]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fc ff65 	bl	8001384 <HAL_GetTick>
 80044ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044bc:	e009      	b.n	80044d2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044be:	f7fc ff61 	bl	8001384 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d902      	bls.n	80044d2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	73fb      	strb	r3, [r7, #15]
        break;
 80044d0:	e005      	b.n	80044de <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ef      	bne.n	80044be <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d14a      	bne.n	800457a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d111      	bne.n	800450e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	0211      	lsls	r1, r2, #8
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68d2      	ldr	r2, [r2, #12]
 8004500:	0912      	lsrs	r2, r2, #4
 8004502:	0452      	lsls	r2, r2, #17
 8004504:	430a      	orrs	r2, r1
 8004506:	491f      	ldr	r1, [pc, #124]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	614b      	str	r3, [r1, #20]
 800450c:	e011      	b.n	8004532 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	0211      	lsls	r1, r2, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6912      	ldr	r2, [r2, #16]
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	3a01      	subs	r2, #1
 8004528:	0652      	lsls	r2, r2, #25
 800452a:	430a      	orrs	r2, r1
 800452c:	4915      	ldr	r1, [pc, #84]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fc ff21 	bl	8001384 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004544:	e009      	b.n	800455a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004546:	f7fc ff1d 	bl	8001384 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	73fb      	strb	r3, [r7, #15]
          break;
 8004558:	e005      	b.n	8004566 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000

08004588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e01d      	b.n	80045d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fd22 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fc18 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_TIM_Base_Start_IT+0x50>)
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d00b      	beq.n	8004622 <HAL_TIM_Base_Start_IT+0x42>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d007      	beq.n	8004622 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	00010007 	.word	0x00010007

08004634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01d      	b.n	8004682 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fca8 	bl	8000fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fbc2 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d841      	bhi.n	8004720 <HAL_TIM_PWM_Start_IT+0x94>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <HAL_TIM_PWM_Start_IT+0x18>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004721 	.word	0x08004721
 80046b0:	08004721 	.word	0x08004721
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	08004721 	.word	0x08004721
 80046bc:	08004721 	.word	0x08004721
 80046c0:	08004721 	.word	0x08004721
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004721 	.word	0x08004721
 80046d0:	08004721 	.word	0x08004721
 80046d4:	0800470f 	.word	0x0800470f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0202 	orr.w	r2, r2, #2
 80046e6:	60da      	str	r2, [r3, #12]
      break;
 80046e8:	e01b      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0204 	orr.w	r2, r2, #4
 80046f8:	60da      	str	r2, [r3, #12]
      break;
 80046fa:	e012      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0208 	orr.w	r2, r2, #8
 800470a:	60da      	str	r2, [r3, #12]
      break;
 800470c:	e009      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0210 	orr.w	r2, r2, #16
 800471c:	60da      	str	r2, [r3, #12]
      break;
 800471e:	e000      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004720:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ff70 	bl	8005610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_TIM_PWM_Start_IT+0x124>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_TIM_PWM_Start_IT+0xd6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_TIM_PWM_Start_IT+0x128>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_PWM_Start_IT+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_TIM_PWM_Start_IT+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIM_PWM_Start_IT+0xd6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_TIM_PWM_Start_IT+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_PWM_Start_IT+0xd6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_TIM_PWM_Start_IT+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_Start_IT+0xda>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_TIM_PWM_Start_IT+0xdc>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_TIM_PWM_Start_IT+0x138>)
 8004784:	4013      	ands	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d00b      	beq.n	80047a6 <HAL_TIM_PWM_Start_IT+0x11a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d007      	beq.n	80047a6 <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	00010007 	.word	0x00010007

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0202 	mvn.w	r2, #2
 80047f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fad7 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fac9 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fada 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 faad 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa9f 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fab0 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0208 	mvn.w	r2, #8
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa83 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa75 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fa86 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0210 	mvn.w	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2208      	movs	r2, #8
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa59 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa4b 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa5c 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fb fdf4 	bl	8000534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 ff04 	bl	8005780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fef7 	bl	8005794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d10e      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d107      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa0a 	bl	8004de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d10e      	bne.n	80049fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0220 	mvn.w	r2, #32
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 feb7 	bl	800576c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e105      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b14      	cmp	r3, #20
 8004a36:	f200 80f0 	bhi.w	8004c1a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004c1b 	.word	0x08004c1b
 8004a48:	08004c1b 	.word	0x08004c1b
 8004a4c:	08004c1b 	.word	0x08004c1b
 8004a50:	08004ad5 	.word	0x08004ad5
 8004a54:	08004c1b 	.word	0x08004c1b
 8004a58:	08004c1b 	.word	0x08004c1b
 8004a5c:	08004c1b 	.word	0x08004c1b
 8004a60:	08004b17 	.word	0x08004b17
 8004a64:	08004c1b 	.word	0x08004c1b
 8004a68:	08004c1b 	.word	0x08004c1b
 8004a6c:	08004c1b 	.word	0x08004c1b
 8004a70:	08004b57 	.word	0x08004b57
 8004a74:	08004c1b 	.word	0x08004c1b
 8004a78:	08004c1b 	.word	0x08004c1b
 8004a7c:	08004c1b 	.word	0x08004c1b
 8004a80:	08004b99 	.word	0x08004b99
 8004a84:	08004c1b 	.word	0x08004c1b
 8004a88:	08004c1b 	.word	0x08004c1b
 8004a8c:	08004c1b 	.word	0x08004c1b
 8004a90:	08004bd9 	.word	0x08004bd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa48 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	619a      	str	r2, [r3, #24]
      break;
 8004ad2:	e0a3      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fab8 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	619a      	str	r2, [r3, #24]
      break;
 8004b14:	e082      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fb21 	bl	8005164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0208 	orr.w	r2, r2, #8
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0204 	bic.w	r2, r2, #4
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
      break;
 8004b54:	e062      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fb89 	bl	8005274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	021a      	lsls	r2, r3, #8
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	61da      	str	r2, [r3, #28]
      break;
 8004b96:	e041      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fbd2 	bl	8005348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bd6:	e021      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fc16 	bl	8005410 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004c1a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0a8      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x16a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d067      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x124>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d80b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x70>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d073      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d802      	bhi.n	8004c9e <HAL_TIM_ConfigClockSource+0x66>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06f      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c9c:	e078      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d06c      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
 8004ca2:	2b30      	cmp	r3, #48	; 0x30
 8004ca4:	d06a      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004ca6:	e073      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d00d      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0x90>
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d804      	bhi.n	8004cba <HAL_TIM_ConfigClockSource+0x82>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d033      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0xe4>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d041      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004cb8:	e06a      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d066      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x156>
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d017      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004cc6:	e063      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f000 fc7a 	bl	80055d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]
      break;
 8004cf4:	e04c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f000 fc63 	bl	80055d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d18:	609a      	str	r2, [r3, #8]
      break;
 8004d1a:	e039      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f000 fbd7 	bl	80054dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2150      	movs	r1, #80	; 0x50
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fc30 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e029      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f000 fbf6 	bl	800553a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2160      	movs	r1, #96	; 0x60
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fc20 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e019      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f000 fbb7 	bl	80054dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fc10 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e009      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f000 fc07 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d00f      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3d      	ldr	r2, [pc, #244]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3a      	ldr	r2, [pc, #232]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01f      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d01b      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d017      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <TIM_Base_SetConfig+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <TIM_Base_SetConfig+0x130>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_OC1_SetConfig+0x10c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_OC1_SetConfig+0x110>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_OC1_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0308 	bic.w	r3, r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <TIM_OC1_SetConfig+0x10c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <TIM_OC1_SetConfig+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <TIM_OC1_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d111      	bne.n	8005016 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0210 	bic.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0320 	bic.w	r3, r3, #32
 800509e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_OC2_SetConfig+0x100>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x6c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_OC2_SetConfig+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <TIM_OC2_SetConfig+0x100>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00f      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <TIM_OC2_SetConfig+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <TIM_OC2_SetConfig+0x108>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	; (800515c <TIM_OC2_SetConfig+0x10c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a19      	ldr	r2, [pc, #100]	; (8005160 <TIM_OC2_SetConfig+0x110>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d113      	bne.n	8005128 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC3_SetConfig+0x6a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a26      	ldr	r2, [pc, #152]	; (8005264 <TIM_OC3_SetConfig+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10d      	bne.n	80051ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC3_SetConfig+0x100>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <TIM_OC3_SetConfig+0x104>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC3_SetConfig+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <TIM_OC3_SetConfig+0x10c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d113      	bne.n	800523a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <TIM_OC4_SetConfig+0xc0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_OC4_SetConfig+0x84>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <TIM_OC4_SetConfig+0xc4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_OC4_SetConfig+0x84>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a16      	ldr	r2, [pc, #88]	; (800533c <TIM_OC4_SetConfig+0xc8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_OC4_SetConfig+0x84>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <TIM_OC4_SetConfig+0xcc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_OC4_SetConfig+0x84>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a14      	ldr	r2, [pc, #80]	; (8005344 <TIM_OC4_SetConfig+0xd0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d109      	bne.n	800530c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40013400 	.word	0x40013400
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800

08005348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800538c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a17      	ldr	r2, [pc, #92]	; (80053fc <TIM_OC5_SetConfig+0xb4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_OC5_SetConfig+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a16      	ldr	r2, [pc, #88]	; (8005400 <TIM_OC5_SetConfig+0xb8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_OC5_SetConfig+0x7a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <TIM_OC5_SetConfig+0xbc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_OC5_SetConfig+0x7a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <TIM_OC5_SetConfig+0xc0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC5_SetConfig+0x7a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <TIM_OC5_SetConfig+0xc4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d109      	bne.n	80053d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	051b      	lsls	r3, r3, #20
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <TIM_OC6_SetConfig+0xb8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <TIM_OC6_SetConfig+0x7c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC6_SetConfig+0xbc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_OC6_SetConfig+0x7c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <TIM_OC6_SetConfig+0xc0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC6_SetConfig+0x7c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <TIM_OC6_SetConfig+0xc4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC6_SetConfig+0x7c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <TIM_OC6_SetConfig+0xc8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d109      	bne.n	80054a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005492:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40013400 	.word	0x40013400
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800

080054dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 030a 	bic.w	r3, r3, #10
 8005518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553a:	b480      	push	{r7}
 800553c:	b087      	sub	sp, #28
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f043 0307 	orr.w	r3, r3, #7
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2201      	movs	r2, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1a      	ldr	r2, [r3, #32]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e068      	b.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2e      	ldr	r2, [pc, #184]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d018      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10c      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40013400 	.word	0x40013400
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000

0800576c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e040      	b.n	800583c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fb fc6e 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	; 0x24
 80057d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f986 	bl	8005af8 <UART_SetConfig>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e022      	b.n	800583c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fcec 	bl	80061dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fd73 	bl	8006320 <UART_CheckIdleState>
 800583a:	4603      	mov	r3, r0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	f640 030f 	movw	r3, #2063	; 0x80f
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d113      	bne.n	800589c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8114 	beq.w	8005aba <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
      }
      return;
 800589a:	e10e      	b.n	8005aba <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80d6 	beq.w	8005a50 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80cb 	beq.w	8005a50 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <HAL_UART_IRQHandler+0x9e>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00e      	beq.n	800590a <HAL_UART_IRQHandler+0xc6>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2202      	movs	r2, #2
 80058fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005902:	f043 0204 	orr.w	r2, r3, #4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <HAL_UART_IRQHandler+0xee>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2204      	movs	r2, #4
 8005924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	f043 0202 	orr.w	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d013      	beq.n	8005964 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2208      	movs	r2, #8
 8005956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595c:	f043 0208 	orr.w	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <HAL_UART_IRQHandler+0x14a>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8093 	beq.w	8005abe <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d004      	beq.n	80059da <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d031      	beq.n	8005a3e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fd60 	bl	80064a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d123      	bne.n	8005a36 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0a:	4a30      	ldr	r2, [pc, #192]	; (8005acc <HAL_UART_IRQHandler+0x288>)
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd f86f 	bl	8002af6 <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00e      	b.n	8005a4c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f858 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00a      	b.n	8005a4c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f854 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e006      	b.n	8005a4c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f850 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005a4a:	e038      	b.n	8005abe <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	bf00      	nop
    return;
 8005a4e:	e036      	b.n	8005abe <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00d      	beq.n	8005a76 <HAL_UART_IRQHandler+0x232>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd65 	bl	800653e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a74:	e026      	b.n	8005ac4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d017      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
    }
    return;
 8005a9a:	e012      	b.n	8005ac2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x280>
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d009      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fd2b 	bl	800650c <UART_EndTransmit_IT>
    return;
 8005ab6:	bf00      	nop
 8005ab8:	e004      	b.n	8005ac4 <HAL_UART_IRQHandler+0x280>
      return;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <HAL_UART_IRQHandler+0x280>
    return;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_UART_IRQHandler+0x280>
    return;
 8005ac2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	080064e1 	.word	0x080064e1

08005ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005afc:	b08a      	sub	sp, #40	; 0x28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4bb8      	ldr	r3, [pc, #736]	; (8005e10 <UART_SetConfig+0x318>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4aae      	ldr	r2, [pc, #696]	; (8005e14 <UART_SetConfig+0x31c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	4313      	orrs	r3, r2
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4aa5      	ldr	r2, [pc, #660]	; (8005e18 <UART_SetConfig+0x320>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d126      	bne.n	8005bd6 <UART_SetConfig+0xde>
 8005b88:	4ba4      	ldr	r3, [pc, #656]	; (8005e1c <UART_SetConfig+0x324>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d81a      	bhi.n	8005bcc <UART_SetConfig+0xd4>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0xa4>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb2:	e105      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bba:	e101      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc2:	e0fd      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bca:	e0f9      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	bf00      	nop
 8005bd4:	e0f4      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a91      	ldr	r2, [pc, #580]	; (8005e20 <UART_SetConfig+0x328>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d138      	bne.n	8005c52 <UART_SetConfig+0x15a>
 8005be0:	4b8e      	ldr	r3, [pc, #568]	; (8005e1c <UART_SetConfig+0x324>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b0c      	cmp	r3, #12
 8005bec:	d82c      	bhi.n	8005c48 <UART_SetConfig+0x150>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0xfc>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c49 	.word	0x08005c49
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c49 	.word	0x08005c49
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c49 	.word	0x08005c49
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2e:	e0c7      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c36:	e0c3      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	e0bf      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e0bb      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	bf00      	nop
 8005c50:	e0b6      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a73      	ldr	r2, [pc, #460]	; (8005e24 <UART_SetConfig+0x32c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d125      	bne.n	8005ca8 <UART_SetConfig+0x1b0>
 8005c5c:	4b6f      	ldr	r3, [pc, #444]	; (8005e1c <UART_SetConfig+0x324>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d011      	beq.n	8005c8e <UART_SetConfig+0x196>
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d802      	bhi.n	8005c74 <UART_SetConfig+0x17c>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <UART_SetConfig+0x186>
 8005c72:	e014      	b.n	8005c9e <UART_SetConfig+0x1a6>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d006      	beq.n	8005c86 <UART_SetConfig+0x18e>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d00c      	beq.n	8005c96 <UART_SetConfig+0x19e>
 8005c7c:	e00f      	b.n	8005c9e <UART_SetConfig+0x1a6>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c84:	e09c      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c86:	2302      	movs	r3, #2
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8c:	e098      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c94:	e094      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c96:	2308      	movs	r3, #8
 8005c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9c:	e090      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca4:	bf00      	nop
 8005ca6:	e08b      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5e      	ldr	r2, [pc, #376]	; (8005e28 <UART_SetConfig+0x330>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d125      	bne.n	8005cfe <UART_SetConfig+0x206>
 8005cb2:	4b5a      	ldr	r3, [pc, #360]	; (8005e1c <UART_SetConfig+0x324>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d011      	beq.n	8005ce4 <UART_SetConfig+0x1ec>
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d802      	bhi.n	8005cca <UART_SetConfig+0x1d2>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <UART_SetConfig+0x1dc>
 8005cc8:	e014      	b.n	8005cf4 <UART_SetConfig+0x1fc>
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d006      	beq.n	8005cdc <UART_SetConfig+0x1e4>
 8005cce:	2bc0      	cmp	r3, #192	; 0xc0
 8005cd0:	d00c      	beq.n	8005cec <UART_SetConfig+0x1f4>
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x1fc>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e071      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e06d      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e069      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e065      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	bf00      	nop
 8005cfc:	e060      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4a      	ldr	r2, [pc, #296]	; (8005e2c <UART_SetConfig+0x334>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d129      	bne.n	8005d5c <UART_SetConfig+0x264>
 8005d08:	4b44      	ldr	r3, [pc, #272]	; (8005e1c <UART_SetConfig+0x324>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d16:	d014      	beq.n	8005d42 <UART_SetConfig+0x24a>
 8005d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1c:	d802      	bhi.n	8005d24 <UART_SetConfig+0x22c>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <UART_SetConfig+0x23a>
 8005d22:	e016      	b.n	8005d52 <UART_SetConfig+0x25a>
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d007      	beq.n	8005d3a <UART_SetConfig+0x242>
 8005d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d2e:	d00c      	beq.n	8005d4a <UART_SetConfig+0x252>
 8005d30:	e00f      	b.n	8005d52 <UART_SetConfig+0x25a>
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d38:	e042      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d40:	e03e      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d42:	2304      	movs	r3, #4
 8005d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d48:	e03a      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d50:	e036      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d52:	2310      	movs	r3, #16
 8005d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d58:	bf00      	nop
 8005d5a:	e031      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <UART_SetConfig+0x31c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d129      	bne.n	8005dba <UART_SetConfig+0x2c2>
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <UART_SetConfig+0x324>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d014      	beq.n	8005da0 <UART_SetConfig+0x2a8>
 8005d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7a:	d802      	bhi.n	8005d82 <UART_SetConfig+0x28a>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <UART_SetConfig+0x298>
 8005d80:	e016      	b.n	8005db0 <UART_SetConfig+0x2b8>
 8005d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d86:	d007      	beq.n	8005d98 <UART_SetConfig+0x2a0>
 8005d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d8c:	d00c      	beq.n	8005da8 <UART_SetConfig+0x2b0>
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x2b8>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e013      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da6:	e00b      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dae:	e007      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <UART_SetConfig+0x2c8>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <UART_SetConfig+0x31c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f040 80fe 	bne.w	8005fc8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d837      	bhi.n	8005e44 <UART_SetConfig+0x34c>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x2e4>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e45 	.word	0x08005e45
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e45 	.word	0x08005e45
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e45 	.word	0x08005e45
 8005dfc:	08005e3d 	.word	0x08005e3d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7fd fe86 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005e04:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e06:	e020      	b.n	8005e4a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <UART_SetConfig+0x338>)
 8005e0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e0c:	e01d      	b.n	8005e4a <UART_SetConfig+0x352>
 8005e0e:	bf00      	nop
 8005e10:	efff69f3 	.word	0xefff69f3
 8005e14:	40008000 	.word	0x40008000
 8005e18:	40013800 	.word	0x40013800
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40004400 	.word	0x40004400
 8005e24:	40004800 	.word	0x40004800
 8005e28:	40004c00 	.word	0x40004c00
 8005e2c:	40005000 	.word	0x40005000
 8005e30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005e34:	f7fd fdd6 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005e38:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e3a:	e006      	b.n	8005e4a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e42:	e002      	b.n	8005e4a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	76fb      	strb	r3, [r7, #27]
        break;
 8005e48:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 81b9 	beq.w	80061c4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d305      	bcc.n	8005e6e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d902      	bls.n	8005e74 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	76fb      	strb	r3, [r7, #27]
 8005e72:	e1a7      	b.n	80061c4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	f200 8092 	bhi.w	8005fa2 <UART_SetConfig+0x4aa>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0x38c>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005fa3 	.word	0x08005fa3
 8005e8c:	08005ef7 	.word	0x08005ef7
 8005e90:	08005fa3 	.word	0x08005fa3
 8005e94:	08005f2b 	.word	0x08005f2b
 8005e98:	08005fa3 	.word	0x08005fa3
 8005e9c:	08005fa3 	.word	0x08005fa3
 8005ea0:	08005fa3 	.word	0x08005fa3
 8005ea4:	08005f79 	.word	0x08005f79
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fd fe32 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005eac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	f04f 0400 	mov.w	r4, #0
 8005ebe:	0214      	lsls	r4, r2, #8
 8005ec0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ec4:	020b      	lsls	r3, r1, #8
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6852      	ldr	r2, [r2, #4]
 8005eca:	0852      	lsrs	r2, r2, #1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	eb13 0b01 	adds.w	fp, r3, r1
 8005ed6:	eb44 0c02 	adc.w	ip, r4, r2
 8005eda:	4658      	mov	r0, fp
 8005edc:	4661      	mov	r1, ip
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f04f 0400 	mov.w	r4, #0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4623      	mov	r3, r4
 8005eea:	f7fa f96d 	bl	80001c8 <__aeabi_uldivmod>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ef4:	e058      	b.n	8005fa8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	f04f 0400 	mov.w	r4, #0
 8005f00:	49ae      	ldr	r1, [pc, #696]	; (80061bc <UART_SetConfig+0x6c4>)
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	eb13 0b01 	adds.w	fp, r3, r1
 8005f0a:	eb44 0c02 	adc.w	ip, r4, r2
 8005f0e:	4658      	mov	r0, fp
 8005f10:	4661      	mov	r1, ip
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f04f 0400 	mov.w	r4, #0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	f7fa f953 	bl	80001c8 <__aeabi_uldivmod>
 8005f22:	4603      	mov	r3, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005f28:	e03e      	b.n	8005fa8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fd fd5b 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005f2e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4619      	mov	r1, r3
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	f04f 0400 	mov.w	r4, #0
 8005f40:	0214      	lsls	r4, r2, #8
 8005f42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f46:	020b      	lsls	r3, r1, #8
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6852      	ldr	r2, [r2, #4]
 8005f4c:	0852      	lsrs	r2, r2, #1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	eb13 0b01 	adds.w	fp, r3, r1
 8005f58:	eb44 0c02 	adc.w	ip, r4, r2
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	4661      	mov	r1, ip
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f04f 0400 	mov.w	r4, #0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	f7fa f92c 	bl	80001c8 <__aeabi_uldivmod>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005f76:	e017      	b.n	8005fa8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	f04f 0400 	mov.w	r4, #0
 8005f82:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005f86:	f144 0100 	adc.w	r1, r4, #0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f04f 0400 	mov.w	r4, #0
 8005f92:	461a      	mov	r2, r3
 8005f94:	4623      	mov	r3, r4
 8005f96:	f7fa f917 	bl	80001c8 <__aeabi_uldivmod>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005fa0:	e002      	b.n	8005fa8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	76fb      	strb	r3, [r7, #27]
            break;
 8005fa6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fae:	d308      	bcc.n	8005fc2 <UART_SetConfig+0x4ca>
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb6:	d204      	bcs.n	8005fc2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	60da      	str	r2, [r3, #12]
 8005fc0:	e100      	b.n	80061c4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	76fb      	strb	r3, [r7, #27]
 8005fc6:	e0fd      	b.n	80061c4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd0:	f040 8084 	bne.w	80060dc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d85f      	bhi.n	800609c <UART_SetConfig+0x5a4>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <UART_SetConfig+0x4ec>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006049 	.word	0x08006049
 8005ff0:	0800609d 	.word	0x0800609d
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	0800609d 	.word	0x0800609d
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	0800609d 	.word	0x0800609d
 8006004:	08006085 	.word	0x08006085
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006008:	f7fd fd82 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 800600c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	005a      	lsls	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006026:	e03c      	b.n	80060a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fd fd88 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 800602c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	005a      	lsls	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	441a      	add	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	b29b      	uxth	r3, r3
 8006044:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006046:	e02c      	b.n	80060a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006052:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6852      	ldr	r2, [r2, #4]
 800605a:	fbb3 f3f2 	udiv	r3, r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006062:	e01e      	b.n	80060a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006064:	f7fd fcbe 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8006068:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	005a      	lsls	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	b29b      	uxth	r3, r3
 8006080:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006082:	e00e      	b.n	80060a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	b29b      	uxth	r3, r3
 8006098:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800609a:	e002      	b.n	80060a2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	76fb      	strb	r3, [r7, #27]
        break;
 80060a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d916      	bls.n	80060d6 <UART_SetConfig+0x5de>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ae:	d212      	bcs.n	80060d6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f023 030f 	bic.w	r3, r3, #15
 80060b8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	89fa      	ldrh	r2, [r7, #14]
 80060d2:	60da      	str	r2, [r3, #12]
 80060d4:	e076      	b.n	80061c4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	76fb      	strb	r3, [r7, #27]
 80060da:	e073      	b.n	80061c4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80060dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d85c      	bhi.n	800619e <UART_SetConfig+0x6a6>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x5f4>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006111 	.word	0x08006111
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800619f 	.word	0x0800619f
 80060fc:	08006169 	.word	0x08006169
 8006100:	0800619f 	.word	0x0800619f
 8006104:	0800619f 	.word	0x0800619f
 8006108:	0800619f 	.word	0x0800619f
 800610c:	08006187 	.word	0x08006187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd fcfe 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8006114:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	085a      	lsrs	r2, r3, #1
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800612c:	e03a      	b.n	80061a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800612e:	f7fd fd05 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8006132:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	085a      	lsrs	r2, r3, #1
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	441a      	add	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	b29b      	uxth	r3, r3
 8006148:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800614a:	e02b      	b.n	80061a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006156:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6852      	ldr	r2, [r2, #4]
 800615e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006166:	e01d      	b.n	80061a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006168:	f7fd fc3c 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800616c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	085a      	lsrs	r2, r3, #1
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	441a      	add	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006184:	e00e      	b.n	80061a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	b29b      	uxth	r3, r3
 800619a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800619c:	e002      	b.n	80061a4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	76fb      	strb	r3, [r7, #27]
        break;
 80061a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d90a      	bls.n	80061c0 <UART_SetConfig+0x6c8>
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b0:	d206      	bcs.n	80061c0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e003      	b.n	80061c4 <UART_SetConfig+0x6cc>
 80061bc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80061d0:	7efb      	ldrb	r3, [r7, #27]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3728      	adds	r7, #40	; 0x28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080061dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062da:	d10a      	bne.n	80062f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800632e:	f7fb f829 	bl	8001384 <HAL_GetTick>
 8006332:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b08      	cmp	r3, #8
 8006340:	d10e      	bne.n	8006360 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006342:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f82a 	bl	80063aa <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e020      	b.n	80063a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b04      	cmp	r3, #4
 800636c:	d10e      	bne.n	800638c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800636e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f814 	bl	80063aa <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e00a      	b.n	80063a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ba:	e05d      	b.n	8006478 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c2:	d059      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fa ffde 	bl	8001384 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <UART_WaitOnFlagUntilTimeout+0x30>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11b      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e042      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02b      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642e:	d123      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006438:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006448:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e00f      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	429a      	cmp	r2, r3
 8006494:	d092      	beq.n	80063bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff faf0 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006522:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff facd 	bl	8005ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <__libc_init_array>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	4e0d      	ldr	r6, [pc, #52]	; (800658c <__libc_init_array+0x38>)
 8006558:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <__libc_init_array+0x3c>)
 800655a:	1ba4      	subs	r4, r4, r6
 800655c:	10a4      	asrs	r4, r4, #2
 800655e:	2500      	movs	r5, #0
 8006560:	42a5      	cmp	r5, r4
 8006562:	d109      	bne.n	8006578 <__libc_init_array+0x24>
 8006564:	4e0b      	ldr	r6, [pc, #44]	; (8006594 <__libc_init_array+0x40>)
 8006566:	4c0c      	ldr	r4, [pc, #48]	; (8006598 <__libc_init_array+0x44>)
 8006568:	f000 f820 	bl	80065ac <_init>
 800656c:	1ba4      	subs	r4, r4, r6
 800656e:	10a4      	asrs	r4, r4, #2
 8006570:	2500      	movs	r5, #0
 8006572:	42a5      	cmp	r5, r4
 8006574:	d105      	bne.n	8006582 <__libc_init_array+0x2e>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800657c:	4798      	blx	r3
 800657e:	3501      	adds	r5, #1
 8006580:	e7ee      	b.n	8006560 <__libc_init_array+0xc>
 8006582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006586:	4798      	blx	r3
 8006588:	3501      	adds	r5, #1
 800658a:	e7f2      	b.n	8006572 <__libc_init_array+0x1e>
 800658c:	08006614 	.word	0x08006614
 8006590:	08006614 	.word	0x08006614
 8006594:	08006614 	.word	0x08006614
 8006598:	08006618 	.word	0x08006618

0800659c <memset>:
 800659c:	4402      	add	r2, r0
 800659e:	4603      	mov	r3, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d100      	bne.n	80065a6 <memset+0xa>
 80065a4:	4770      	bx	lr
 80065a6:	f803 1b01 	strb.w	r1, [r3], #1
 80065aa:	e7f9      	b.n	80065a0 <memset+0x4>

080065ac <_init>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr

080065b8 <_fini>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr
